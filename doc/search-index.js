var searchIndex={};
searchIndex["abitest_0_frontend"] = {"doc":"","i":[[5,"frontend_oak_main","abitest_0_frontend","",null,[[["u64"]]]],[0,"proto","","",null,null],[3,"AbiTestRequest","abitest_0_frontend::proto","",null,null],[12,"include","","Regular expression of test names to include in the test run.",0,null],[12,"exclude","","If non-empty, holds a regular expression of test names toâ€¦",0,null],[3,"AbiTestResponse","","",null,null],[12,"results","","",1,null],[3,"GrpcTestRequest","","",null,null],[12,"method_result","","",2,null],[3,"GrpcTestResponse","","",null,null],[12,"text","","",3,null],[3,"OakAbiTestServiceDispatcher","","",null,null],[3,"OakAbiTestServiceClient","","",null,null],[12,"0","","",4,null],[0,"abi_test_response","","",null,null],[3,"TestResult","abitest_0_frontend::proto::abi_test_response","",null,null],[12,"name","","",5,null],[12,"success","","",5,null],[12,"details","","",5,null],[12,"disabled","","",5,null],[0,"grpc_test_request","abitest_0_frontend::proto","",null,null],[4,"MethodResult","abitest_0_frontend::proto::grpc_test_request","",null,null],[13,"ErrCode","","",6,null],[13,"OkText","","",6,null],[11,"encode","","",6,[[["self"],["b"]]]],[11,"merge","","",6,[[["decodecontext"],["u32"],["b"],["option"],["wiretype"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",6,[[["self"]],["usize"]]],[8,"OakAbiTestService","abitest_0_frontend::proto","",null,null],[10,"run_tests","","",7,[[["abitestrequest"],["self"]],[["result",["abitestresponse"]],["abitestresponse"]]]],[10,"unary_method","","",7,[[["self"],["grpctestrequest"]],[["result",["grpctestresponse"]],["grpctestresponse"]]]],[10,"server_streaming_method","","",7,[[["self"],["channelresponsewriter"],["grpctestrequest"]]]],[10,"client_streaming_method","","",7,[[["self"],["vec",["grpctestrequest"]],["grpctestrequest"]],[["result",["grpctestresponse"]],["grpctestresponse"]]]],[10,"bidi_streaming_method","","",7,[[["channelresponsewriter"],["vec",["grpctestrequest"]],["grpctestrequest"],["self"]]]],[11,"new","","",8,[[["t"]],["oakabitestservicedispatcher"]]],[11,"run_tests","","",4,[[["abitestrequest"],["self"]],[["result",["abitestresponse"]],["abitestresponse"]]]],[11,"unary_method","","",4,[[["self"],["grpctestrequest"]],[["result",["grpctestresponse"]],["grpctestresponse"]]]],[11,"server_streaming_method","","",4,[[["self"],["grpctestrequest"]],[["result",["receiver"]],["receiver",["grpcresponse"]]]]],[11,"client_streaming_method","","",4,[[["self"],["grpctestrequest"]],[["result",["grpctestresponse"]],["grpctestresponse"]]]],[11,"bidi_streaming_method","","",4,[[["self"],["grpctestrequest"]],[["result",["receiver"]],["receiver",["grpcresponse"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"decode","","",0,[[["message"]],[["oakerror"],["result",["oakerror"]]]]],[11,"encode","","",0,[[["self"]],[["result",["message","oakerror"]],["message"],["oakerror"]]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"decode","","",1,[[["message"]],[["oakerror"],["result",["oakerror"]]]]],[11,"encode","","",1,[[["self"]],[["result",["message","oakerror"]],["message"],["oakerror"]]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"decode","","",2,[[["message"]],[["oakerror"],["result",["oakerror"]]]]],[11,"encode","","",2,[[["self"]],[["result",["message","oakerror"]],["message"],["oakerror"]]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"decode","","",3,[[["message"]],[["oakerror"],["result",["oakerror"]]]]],[11,"encode","","",3,[[["self"]],[["result",["message","oakerror"]],["message"],["oakerror"]]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"handle_command","","Handle incoming gRPC events for an [`ServerNode`].",8,[[["self"],["invocation"]],[["result",["oakerror"]],["oakerror"]]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","abitest_0_frontend::proto::abi_test_response","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"decode","","",5,[[["message"]],[["oakerror"],["result",["oakerror"]]]]],[11,"encode","","",5,[[["self"]],[["result",["message","oakerror"]],["message"],["oakerror"]]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","abitest_0_frontend::proto::grpc_test_request","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"clone","abitest_0_frontend::proto","",0,[[["self"]],["abitestrequest"]]],[11,"clone","","",1,[[["self"]],["abitestresponse"]]],[11,"clone","abitest_0_frontend::proto::abi_test_response","",5,[[["self"]],["testresult"]]],[11,"clone","abitest_0_frontend::proto","",2,[[["self"]],["grpctestrequest"]]],[11,"clone","abitest_0_frontend::proto::grpc_test_request","",6,[[["self"]],["methodresult"]]],[11,"clone","abitest_0_frontend::proto","",3,[[["self"]],["grpctestresponse"]]],[11,"default","","",0,[[],["abitestrequest"]]],[11,"default","","",1,[[],["abitestresponse"]]],[11,"default","abitest_0_frontend::proto::abi_test_response","",5,[[],["testresult"]]],[11,"default","abitest_0_frontend::proto","",2,[[],["grpctestrequest"]]],[11,"default","","",3,[[],["grpctestresponse"]]],[11,"eq","","",0,[[["self"],["abitestrequest"]],["bool"]]],[11,"ne","","",0,[[["self"],["abitestrequest"]],["bool"]]],[11,"eq","","",1,[[["self"],["abitestresponse"]],["bool"]]],[11,"ne","","",1,[[["self"],["abitestresponse"]],["bool"]]],[11,"eq","abitest_0_frontend::proto::abi_test_response","",5,[[["self"],["testresult"]],["bool"]]],[11,"ne","","",5,[[["self"],["testresult"]],["bool"]]],[11,"eq","abitest_0_frontend::proto","",2,[[["grpctestrequest"],["self"]],["bool"]]],[11,"ne","","",2,[[["grpctestrequest"],["self"]],["bool"]]],[11,"eq","abitest_0_frontend::proto::grpc_test_request","",6,[[["self"],["methodresult"]],["bool"]]],[11,"ne","","",6,[[["self"],["methodresult"]],["bool"]]],[11,"eq","abitest_0_frontend::proto","",3,[[["self"],["grpctestresponse"]],["bool"]]],[11,"ne","","",3,[[["self"],["grpctestresponse"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","abitest_0_frontend::proto::abi_test_response","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","abitest_0_frontend::proto","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","abitest_0_frontend::proto::grpc_test_request","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","abitest_0_frontend::proto","",3,[[["self"],["formatter"]],["result"]]],[11,"invoke","","",8,[[["str"],["channelresponsewriter"],["self"]]]],[11,"encode_raw","","",0,[[["self"],["b"]]]],[11,"merge_field","","",0,[[["decodecontext"],["u32"],["b"],["self"],["wiretype"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",0,[[["self"]],["usize"]]],[11,"clear","","",0,[[["self"]]]],[11,"encode_raw","","",1,[[["self"],["b"]]]],[11,"merge_field","","",1,[[["decodecontext"],["u32"],["b"],["self"],["wiretype"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",1,[[["self"]],["usize"]]],[11,"clear","","",1,[[["self"]]]],[11,"encode_raw","abitest_0_frontend::proto::abi_test_response","",5,[[["self"],["b"]]]],[11,"merge_field","","",5,[[["decodecontext"],["u32"],["b"],["self"],["wiretype"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",5,[[["self"]],["usize"]]],[11,"clear","","",5,[[["self"]]]],[11,"encode_raw","abitest_0_frontend::proto","",2,[[["self"],["b"]]]],[11,"merge_field","","",2,[[["decodecontext"],["u32"],["b"],["self"],["wiretype"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",2,[[["self"]],["usize"]]],[11,"clear","","",2,[[["self"]]]],[11,"encode_raw","","",3,[[["self"],["b"]]]],[11,"merge_field","","",3,[[["decodecontext"],["u32"],["b"],["self"],["wiretype"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",3,[[["self"]],["usize"]]],[11,"clear","","",3,[[["self"]]]]],"p":[[3,"AbiTestRequest"],[3,"AbiTestResponse"],[3,"GrpcTestRequest"],[3,"GrpcTestResponse"],[3,"OakAbiTestServiceClient"],[3,"TestResult"],[4,"MethodResult"],[8,"OakAbiTestService"],[3,"OakAbiTestServiceDispatcher"]]};
searchIndex["abitest_1_backend"] = {"doc":"","i":[[5,"backend_oak_main","abitest_1_backend","",null,[[["u64"]]]],[5,"backend_fake_main","","",null,[[["u64"]]]]],"p":[]};
searchIndex["abitest_common"] = {"doc":"","i":[[3,"InternalMessage","abitest_common","",null,null],[12,"msg","","",0,null],[17,"LOG_CONFIG_NAME","","",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"encode","","",0,[[["self"]],[["result",["message","oakerror"]],["oakerror"],["message"]]]],[11,"fmt","","",0,[[["formatter"],["self"]],["result"]]],[11,"serialize","","",0,[[["self"],["__s"]],["result"]]],[11,"deserialize","","",0,[[["__d"]],["result"]]],[11,"encode","","",0,[[["self"]],[["result",["message","oakerror"]],["message"],["oakerror"]]]]],"p":[[3,"InternalMessage"]]};
searchIndex["abitest_tests"] = {"doc":"","i":[[5,"oak_main","abitest_tests","",null,[[["u64"]],["i32"]]]],"p":[]};
searchIndex["aggregator"] = {"doc":"Aggregator example for Project Oak.","i":[[3,"AggregatorNode","aggregator","Oak Node that collects and aggregates data. Data isâ€¦",null,null],[5,"oak_main","","",null,[[["u64"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]]],"p":[[3,"AggregatorNode"]]};
searchIndex["aggregator_backend"] = {"doc":"Backend server for the Aggregator example.","i":[[3,"AggregatorBackend","aggregator_backend","",null,null],[5,"main","","",null,[[],[["result",["box"]],["box",["error"]]]]],[0,"proto","","",null,null],[3,"SerializedSparseVector","aggregator_backend::proto","Data provided by clients is represented by Sparse Vectors:â€¦",null,null],[12,"indices","","",0,null],[12,"values","","",0,null],[3,"Sample","","Message sent by clients.",null,null],[12,"bucket","","Data with different Bucket IDs is not mixed and aggregatedâ€¦",1,null],[12,"data","","",1,null],[0,"aggregator_server","","Generated server implementations.",null,null],[3,"_Inner","aggregator_backend::proto::aggregator_server","",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[8,"Aggregator","","Generated trait containing gRPC methods that should beâ€¦",null,null],[10,"submit_sample","","",3,[[["self"],["request",["sample"]],["sample"]],[["pin",["box"]],["box",["future"]]]]],[11,"from","aggregator_backend","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"into_request","","",4,[[],["request"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","aggregator_backend::proto","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_request","","",0,[[],["request"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"into_request","","",1,[[],["request"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","aggregator_backend::proto::aggregator_server","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_request","","",2,[[],["request"]]],[11,"vzip","","",2,[[],["v"]]],[11,"submit_sample","aggregator_backend","",4,[[["request",["sample"]],["self"],["sample"]],[["pin",["box"]],["box",["future"]]]]],[11,"clone","aggregator_backend::proto","",0,[[["self"]],["serializedsparsevector"]]],[11,"clone","","",1,[[["self"]],["sample"]]],[11,"clone","aggregator_backend::proto::aggregator_server","",2,[[["self"]],["self"]]],[11,"default","aggregator_backend::proto","",0,[[],["serializedsparsevector"]]],[11,"default","","",1,[[],["sample"]]],[11,"default","aggregator_backend","",4,[[],["aggregatorbackend"]]],[11,"eq","aggregator_backend::proto","",0,[[["self"],["serializedsparsevector"]],["bool"]]],[11,"ne","","",0,[[["self"],["serializedsparsevector"]],["bool"]]],[11,"eq","","",1,[[["sample"],["self"]],["bool"]]],[11,"ne","","",1,[[["sample"],["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","aggregator_backend::proto::aggregator_server","",2,[[["formatter"],["self"]],["result"]]],[11,"encode_raw","aggregator_backend::proto","",0,[[["self"],["b"]]]],[11,"merge_field","","",0,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",0,[[["self"]],["usize"]]],[11,"clear","","",0,[[["self"]]]],[11,"encode_raw","","",1,[[["self"],["b"]]]],[11,"merge_field","","",1,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",1,[[["self"]],["usize"]]],[11,"clear","","",1,[[["self"]]]]],"p":[[3,"SerializedSparseVector"],[3,"Sample"],[3,"_Inner"],[8,"Aggregator"],[3,"AggregatorBackend"]]};
searchIndex["aggregator_common"] = {"doc":"","i":[[3,"ThresholdAggregator","aggregator_common","Generic data structure that combines data values andâ€¦",null,null],[8,"Monoid","","Represents a data structure with a single associativeâ€¦",null,null],[10,"identity","","",0,[[],["self"]]],[10,"combine","","",0,[[["self"]],["self"]]],[11,"new","","",1,[[["u64"]],["self"]]],[11,"submit","","Combines a new sample with the current aggregated value.",1,[[["self"],["t"]]]],[11,"get","","Returns the current aggregated value if the number ofâ€¦",1,[[["self"]],[["option"],["t"]]]],[11,"take","","If the number of current samples is at leastâ€¦",1,[[["self"]],["option"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]]],"p":[[8,"Monoid"],[3,"ThresholdAggregator"]]};
searchIndex["auth_client"] = {"doc":"Example client authenticating to Oak using OpenID Connect.","i":[[3,"Opt","auth_client","",null,null],[12,"address","","",0,null],[12,"redirect_address","","",0,null],[12,"ca_cert","","",0,null],[12,"client_id","","",0,null],[3,"RedirectHandler","","Handles the redirects to extract code from the query string.",null,null],[12,"result_sender","","",1,null],[3,"RedirectHandlerProducer","","Produces instances of the redirect handler service.",null,null],[12,"result_sender","","",2,null],[5,"main","","",null,[[],[["result",["box"]],["box",["error"]]]]],[5,"get_authentication_request_url","","Gets the URL for authentication requests.",null,[[["opt"]],["string"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["opt"]]],[11,"poll_ready","","",1,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",1,[[["self"],["body"],["request",["body"]]]]],[11,"poll_ready","","",2,[[["self"],["context"]],[["poll",["result"]],["result"]]]],[11,"call","","",2,[[["self"],["t"]]]],[11,"clap","","",0,[[],["app"]]],[11,"from_clap","","",0,[[["argmatches"]],["self"]]],[11,"augment_clap","","",0,[[["app"]],["app"]]],[11,"is_subcommand","","",0,[[],["bool"]]]],"p":[[3,"Opt"],[3,"RedirectHandler"],[3,"RedirectHandlerProducer"]]};
searchIndex["chat"] = {"doc":"","i":[[5,"oak_main","chat","",null,[[["u64"]]]]],"p":[]};
searchIndex["expect"] = {"doc":"","i":[[14,"expect_eq","expect","",null,null],[14,"expect_matches","","",null,null],[14,"expect","","",null,null]],"p":[]};
searchIndex["hello_world"] = {"doc":"","i":[[5,"oak_main","hello_world","",null,[[["u64"]]]]],"p":[]};
searchIndex["machine_learning"] = {"doc":"","i":[[5,"oak_main","machine_learning","",null,[[["u64"]]]]],"p":[]};
searchIndex["oak"] = {"doc":"","i":[[3,"Label","oak","Label represents information flowing through a Node orâ€¦",null,null],[12,"secrecy_tags","","",0,null],[12,"integrity_tags","","",0,null],[4,"ChannelReadStatus","","Single byte values used to indicate the read status of aâ€¦",null,null],[13,"NotReady","","No pending messages available on channel.",1,null],[13,"ReadReady","","Pending message available on channel.",1,null],[13,"InvalidChannel","","Channel handle does not identify the read half of aâ€¦",1,null],[13,"Orphaned","","Channel has no extant write halves (and is empty).",1,null],[4,"OakStatus","","Status values exchanged as i32 values across the Node Wasmâ€¦",null,null],[13,"Unspecified","","",2,null],[13,"Ok","","Success.",2,null],[13,"ErrBadHandle","","Invalid handle provided.",2,null],[13,"ErrInvalidArgs","","Arguments invalid.",2,null],[13,"ErrChannelClosed","","Channel has been closed.",2,null],[13,"ErrBufferTooSmall","","Provided buffer was too small for operation (an outputâ€¦",2,null],[13,"ErrHandleSpaceTooSmall","","Provided handle space was too small for operation (anâ€¦",2,null],[13,"ErrOutOfRange","","Argument out of valid range.",2,null],[13,"ErrInternal","","Internal error.",2,null],[13,"ErrTerminated","","Node terminated.",2,null],[13,"ErrChannelEmpty","","Channel has no messages available to read.",2,null],[13,"ErrPermissionDenied","","The node does not have sufficient permissions to performâ€¦",2,null],[3,"Handle","","Handle used to identify read or write channel halves.",null,null],[3,"ReadHandle","","Wrapper for a handle to the read half of a channel.",null,null],[12,"handle","","",3,null],[3,"WriteHandle","","Wrapper for a handle to the send half of a channel.",null,null],[12,"handle","","",4,null],[4,"OakError","","Generic Oak error.",null,null],[13,"ProtobufDecodeError","","",5,null],[13,"ProtobufEncodeError","","",5,null],[13,"OakStatus","","",5,null],[13,"IoError","","",5,null],[5,"wait_on_channels","","Wait for one or more of the provided handles to becomeâ€¦",null,[[],[["result",["vec","oakstatus"]],["oakstatus"],["vec",["channelreadstatus"]]]]],[5,"channel_read","","Read a message from a channel without blocking.",null,[[["readhandle"],["vec"],["vec"]],[["oakstatus"],["result",["oakstatus"]]]]],[5,"channel_write","","Write a message to a channel.",null,[[["writehandle"]],[["oakstatus"],["result",["oakstatus"]]]]],[5,"channel_create","","Create a new unidirectional channel.",null,[[],[["oakstatus"],["result",["oakstatus"]]]]],[5,"channel_close","","Close the specified channel [`Handle`].",null,[[["handle"]],[["oakstatus"],["result",["oakstatus"]]]]],[5,"node_create","","Similar to [`node_create_with_label`], but with a fixedâ€¦",null,[[["str"],["readhandle"]],[["oakstatus"],["result",["oakstatus"]]]]],[5,"node_create_with_label","","Creates a new Node running the configuration identified byâ€¦",null,[[["str"],["label"],["readhandle"]],[["oakstatus"],["result",["oakstatus"]]]]],[5,"random_get","","Fill a buffer with random data.",null,[[],[["oakstatus"],["result",["oakstatus"]]]]],[5,"result_from_status","","Convert a status returned from a host function call to aâ€¦",null,[[["t"],["i32"]],[["oakstatus"],["result",["oakstatus"]]]]],[5,"set_panic_hook","","Install a panic hook that logs [panic information].",null,[[]]],[5,"run_event_loop","","Run an event loop on the provided `node`:",null,[[["node"],["decodable"],["u64"]]]],[0,"grpc","","Functionality to help Oak Nodes interact with gRPC.",null,null],[3,"Status","oak::grpc","The `Status` type defines a logical error model that isâ€¦",null,null],[12,"code","","The status code, which should be an enum value ofâ€¦",6,null],[12,"message","","A developer-facing error message, which should be inâ€¦",6,null],[12,"details","","A list of messages that carry the error details. There isâ€¦",6,null],[4,"Code","","The canonical error codes for Google APIs.",null,null],[13,"Ok","","Not an error; returned on success",7,null],[13,"Cancelled","","The operation was cancelled, typically by the caller.",7,null],[13,"Unknown","","Unknown error. For example, this error may be returnedâ€¦",7,null],[13,"InvalidArgument","","The client specified an invalid argument. Note that thisâ€¦",7,null],[13,"DeadlineExceeded","","The deadline expired before the operation could complete.â€¦",7,null],[13,"NotFound","","Some requested entity (e.g., file or directory) was notâ€¦",7,null],[13,"AlreadyExists","","The entity that a client attempted to create (e.g., fileâ€¦",7,null],[13,"PermissionDenied","","The caller does not have permission to execute theâ€¦",7,null],[13,"Unauthenticated","","The request does not have valid authentication credentialsâ€¦",7,null],[13,"ResourceExhausted","","Some resource has been exhausted, perhaps a per-userâ€¦",7,null],[13,"FailedPrecondition","","The operation was rejected because the system is not in aâ€¦",7,null],[13,"Aborted","","The operation was aborted, typically due to a concurrencyâ€¦",7,null],[13,"OutOfRange","","The operation was attempted past the valid range. E.g.,â€¦",7,null],[13,"Unimplemented","","The operation is not implemented or is notâ€¦",7,null],[13,"Internal","","Internal errors. This means that some invariants expectedâ€¦",7,null],[13,"Unavailable","","The service is currently unavailable. This is most likelyâ€¦",7,null],[13,"DataLoss","","Unrecoverable data loss or corruption.",7,null],[3,"GrpcRequest","","",null,null],[12,"method_name","","",8,null],[12,"req_msg","","The body of the request. Usually a serialized protobufâ€¦",8,null],[12,"last","","",8,null],[3,"GrpcResponse","","",null,null],[12,"rsp_msg","","The body of the response. Usually a serialized protobufâ€¦",9,null],[12,"status","","",9,null],[12,"last","","The last field indicates that this is definitely the finalâ€¦",9,null],[3,"Invocation","","A gRPC invocation, consisting of exactly two channels: oneâ€¦",null,null],[12,"request_receiver","","",10,null],[12,"response_sender","","",10,null],[3,"ChannelResponseWriter","","Channel-holding object that encapsulates response messagesâ€¦",null,null],[4,"WriteMode","","Indicate whether a write method should leave the currentâ€¦",null,null],[13,"KeepOpen","","",11,null],[13,"Close","","",11,null],[5,"build_status","","Helper to create a gRPC status object.",null,[[["str"],["code"]],["status"]]],[5,"decap_response","","Extract a protocol buffer message from a GrpcResponseâ€¦",null,[[["grpcresponse"]],["result"]]],[5,"invoke_grpc_method_stream","","Helper to inject a (single) gRPC request message via aâ€¦",null,[[["str"],["r"],["sender"]],[["result",["receiver"]],["receiver",["grpcresponse"]]]]],[5,"invoke_grpc_method","","Helper to inject a (single) gRPC request message via aâ€¦",null,[[["str"],["r"],["sender"]],["result"]]],[5,"handle_req_rsp","","Generic function that handles request deserialization andâ€¦",null,[[["c"],["channelresponsewriter"]]]],[5,"handle_req_stream","","Generic function that handles request deserialization andâ€¦",null,[[["c"],["channelresponsewriter"]]]],[5,"handle_stream_rsp","","Generic function that handles request deserialization andâ€¦",null,[[["c"],["channelresponsewriter"]]]],[5,"handle_stream_stream","","Generic function that handles request deserialization andâ€¦",null,[[["c"],["channelresponsewriter"]]]],[5,"init_default","","Initialize a gRPC pseudo-Node with the defaultâ€¦",null,[[]]],[5,"init","","Initializes a gRPC server pseudo-Node and passes it aâ€¦",null,[[["str"]],[["readhandle"],["oakstatus"],["result",["readhandle","oakstatus"]]]]],[0,"client","","",null,null],[3,"Client","oak::grpc::client","Client for a gRPC service in another Node.",null,null],[12,"invocation_sender","","",12,null],[11,"new","","Create a new Node that implements a gRPC service, and ifâ€¦",12,[[["str"]],[["option",["client"]],["client"]]]],[6,"Result","oak::grpc","Result type that uses a [`Status`] type for error values.",null,null],[17,"DEFAULT_CONFIG_NAME","","Default name for predefined Node configuration thatâ€¦",null,null],[8,"ServerNode","","Trait for Oak Nodes that act as a gRPC services.",null,null],[10,"invoke","","Process a single gRPC method invocation.",13,[[["str"],["self"],["channelresponsewriter"]]]],[11,"new","","",14,[[["sender",["grpcresponse"]],["grpcresponse"]],["self"]]],[11,"handle","","Retrieve the Oak handle underlying the writer object.",14,[[],["writehandle"]]],[11,"write","","Write out a gRPC response and optionally close out theâ€¦",14,[[["t"],["self"],["writemode"]],[["result",["oakerror"]],["oakerror"]]]],[11,"write_empty","","Write an empty gRPC response and optionally close out theâ€¦",14,[[["self"],["writemode"]],[["result",["oakerror"]],["oakerror"]]]],[11,"close","","Close out the gRPC method invocation with the given finalâ€¦",14,[[["self"],["result"]],[["result",["oakerror"]],["oakerror"]]]],[0,"io","oak","Wrappers for Oak SDK types to allow their use withâ€¦",null,null],[3,"Receiver","oak::io","Wrapper for a handle to the read half of a channel,â€¦",null,null],[12,"handle","","",15,null],[3,"Sender","","Wrapper for a handle to the send half of a channel,â€¦",null,null],[12,"handle","","",16,null],[3,"Message","","A simple holder for bytes + handles, using internallyâ€¦",null,null],[12,"bytes","","",17,null],[12,"handles","","",17,null],[5,"channel_create","","Create a new channel for transmission of `Encodable` andâ€¦",null,[[],[["result",["oakstatus"]],["oakstatus"]]]],[5,"error_from_nonok_status","","Map a non-OK [`OakStatus`] value to the nearest availableâ€¦",null,[[["oakstatus"]],["error"]]],[11,"new","","",15,[[["readhandle"]],["self"]]],[11,"close","","Close the underlying channel used by this receiver.",15,[[["self"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"receive","","Attempt to wait for a value on this receiver, blocking ifâ€¦",15,[[["self"]],[["result",["oakerror"]],["oakerror"]]]],[11,"try_receive","","Attempt to read a value from this receiver, withoutâ€¦",15,[[["self"]],[["result",["oakerror"]],["oakerror"]]]],[11,"wait","","Wait for a value to be available from this receiver.",15,[[["self"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"new","","",16,[[["writehandle"]],["self"]]],[11,"close","","Close the underlying channel used by this sender.",16,[[["self"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"send","","Attempt to send a value on this sender.",16,[[["t"],["self"]],[["result",["oakerror"]],["oakerror"]]]],[8,"Decodable","","A trait for objects that can be decoded from bytes +â€¦",null,null],[10,"decode","","",18,[[["message"]],[["oakerror"],["result",["oakerror"]]]]],[8,"Encodable","","A trait for objects that can be encoded as bytes + handles.",null,null],[10,"encode","","",19,[[["self"]],[["message"],["oakerror"],["result",["message","oakerror"]]]]],[0,"logger","oak","A logger that sends output to an Oak logging channel, forâ€¦",null,null],[5,"init_default","oak::logger","Initialize Node-wide default logging.",null,[[]]],[5,"init","","Initialize Node-wide logging via a channel to a loggingâ€¦",null,[[["str"],["level"]],[["result",["setloggererror"]],["setloggererror"]]]],[17,"DEFAULT_CONFIG_NAME","","Default name for predefined Node configuration thatâ€¦",null,null],[0,"rand","oak","Functionality to allow use of the rand crate in Oak.",null,null],[3,"OakRng","oak::rand","",null,null],[0,"roughtime","oak","Helper library for accessing the Oak Roughtime service.",null,null],[3,"Roughtime","oak::roughtime","Local representation of the connection to an externalâ€¦",null,null],[17,"DEFAULT_CONFIG_NAME","","Default name for predefined Node config that correspondsâ€¦",null,null],[11,"default","","Create a default `Roughtime` instance assuming the defaultâ€¦",20,[[],[["option",["roughtime"]],["roughtime"]]]],[11,"new","","Create a `Roughtime` instance using the given nameâ€¦",20,[[["str"]],[["option",["roughtime"]],["roughtime"]]]],[11,"get_roughtime","","Get the current Roughtime value as a Duration since UNIXâ€¦",20,[[["self"]],[["result",["duration"]],["duration"]]]],[0,"storage","oak","Helper library for accessing Oak storage services.",null,null],[3,"Storage","oak::storage","Local representation of the connection to an externalâ€¦",null,null],[17,"DEFAULT_CONFIG_NAME","","Default name for predefined Node config that correspondsâ€¦",null,null],[11,"default","","Create a default `Storage` instance assuming the defaultâ€¦",21,[[],[["storage"],["option",["storage"]]]]],[11,"new","","Create a `Storage` instance using the given nameâ€¦",21,[[["str"]],[["storage"],["option",["storage"]]]]],[11,"read","","Read the value associated with the given `name` from theâ€¦",21,[[["self"]],[["vec",["u8"]],["result",["vec"]]]]],[11,"write","","Set the value associated with the given `name` from theâ€¦",21,[[["self"]],["result"]]],[11,"delete","","Delete the value associated with the given `name` from theâ€¦",21,[[["self"]],["result"]]],[0,"proto","oak","",null,null],[0,"oak","oak::proto","",null,null],[0,"storage","oak::proto::oak","",null,null],[3,"StorageItem","oak::proto::oak::storage","",null,null],[12,"name","","",22,null],[12,"value","","",22,null],[12,"label","","",22,null],[3,"StorageChannelReadRequest","","",null,null],[12,"storage_name","","",23,null],[12,"transaction_id","","",23,null],[12,"item","","",23,null],[3,"StorageChannelReadResponse","","",null,null],[12,"item","","",24,null],[3,"StorageChannelWriteRequest","","",null,null],[12,"storage_name","","",25,null],[12,"transaction_id","","",25,null],[12,"item","","",25,null],[3,"StorageChannelWriteResponse","","",null,null],[3,"StorageChannelDeleteRequest","","",null,null],[12,"storage_name","","",26,null],[12,"transaction_id","","",26,null],[12,"item","","",26,null],[3,"StorageChannelDeleteResponse","","",null,null],[3,"StorageChannelBeginRequest","","",null,null],[12,"storage_name","","",27,null],[3,"StorageChannelBeginResponse","","",null,null],[12,"transaction_id","","",28,null],[3,"StorageChannelCommitRequest","","",null,null],[12,"storage_name","","",29,null],[12,"transaction_id","","",29,null],[3,"StorageChannelCommitResponse","","",null,null],[3,"StorageChannelRollbackRequest","","",null,null],[12,"storage_name","","",30,null],[12,"storage_id","","",30,null],[12,"transaction_id","","",30,null],[3,"StorageChannelRollbackResponse","","",null,null],[3,"StorageServiceDispatcher","","",null,null],[3,"StorageServiceClient","","",null,null],[12,"0","","",31,null],[8,"StorageService","","",null,null],[10,"read","","",32,[[["self"],["storagechannelreadrequest"]],[["result",["storagechannelreadresponse"]],["storagechannelreadresponse"]]]],[10,"write","","",32,[[["storagechannelwriterequest"],["self"]],[["storagechannelwriteresponse"],["result",["storagechannelwriteresponse"]]]]],[10,"delete","","",32,[[["storagechanneldeleterequest"],["self"]],[["result",["storagechanneldeleteresponse"]],["storagechanneldeleteresponse"]]]],[10,"begin","","",32,[[["self"],["storagechannelbeginrequest"]],[["storagechannelbeginresponse"],["result",["storagechannelbeginresponse"]]]]],[10,"commit","","",32,[[["self"],["storagechannelbeginrequest"]],[["result",["storagechannelcommitresponse"]],["storagechannelcommitresponse"]]]],[10,"rollback","","",32,[[["self"],["storagechannelrollbackrequest"]],[["result",["storagechannelrollbackresponse"]],["storagechannelrollbackresponse"]]]],[11,"new","","",33,[[["t"]],["storageservicedispatcher"]]],[11,"read","","",31,[[["self"],["storagechannelreadrequest"]],[["result",["storagechannelreadresponse"]],["storagechannelreadresponse"]]]],[11,"write","","",31,[[["storagechannelwriterequest"],["self"]],[["storagechannelwriteresponse"],["result",["storagechannelwriteresponse"]]]]],[11,"delete","","",31,[[["storagechanneldeleterequest"],["self"]],[["result",["storagechanneldeleteresponse"]],["storagechanneldeleteresponse"]]]],[11,"begin","","",31,[[["self"],["storagechannelbeginrequest"]],[["storagechannelbeginresponse"],["result",["storagechannelbeginresponse"]]]]],[11,"commit","","",31,[[["self"],["storagechannelbeginrequest"]],[["result",["storagechannelcommitresponse"]],["storagechannelcommitresponse"]]]],[11,"rollback","","",31,[[["storagechannelrollbackrequest"],["self"]],[["result",["storagechannelrollbackresponse"]],["storagechannelrollbackresponse"]]]],[0,"roughtime","oak::proto::oak","",null,null],[3,"RoughTimeRequest","oak::proto::oak::roughtime","",null,null],[3,"RoughTimeResponse","","",null,null],[12,"rough_time_usec","","Time is UTC and is given as microseconds since the UNIXâ€¦",34,null],[3,"RoughtimeServiceDispatcher","","",null,null],[3,"RoughtimeServiceClient","","",null,null],[12,"0","","",35,null],[8,"RoughtimeService","","",null,null],[10,"get_rough_time","","",36,[[["self"],["roughtimerequest"]],[["result",["roughtimeresponse"]],["roughtimeresponse"]]]],[11,"new","","",37,[[["t"]],["roughtimeservicedispatcher"]]],[11,"get_rough_time","","",35,[[["self"],["roughtimerequest"]],[["result",["roughtimeresponse"]],["roughtimeresponse"]]]],[8,"Node","oak","Trait implemented by all Oak Nodes.",null,null],[10,"handle_command","","",38,[[["self"],["t"]],[["oakerror"],["result",["oakerror"]]]]],[11,"from_raw","","When using the Oak SDK, this method should not need to beâ€¦",39,[[["u64"]],["handle"]]],[11,"is_valid","","Check this handle is valid.",39,[[],["bool"]]],[11,"invalid","","Returns an intentionally invalid handle.",39,[[],["handle"]]],[14,"entrypoint","","Register a new Node entrypoint.",null,null],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",39,[[["t"]],["t"]]],[11,"into","","",39,[[],["u"]]],[11,"to_owned","","",39,[[["self"]],["t"]]],[11,"clone_into","","",39,[[["self"],["t"]]]],[11,"try_from","","",39,[[["u"]],["result"]]],[11,"try_into","","",39,[[],["result"]]],[11,"borrow","","",39,[[["self"]],["t"]]],[11,"borrow_mut","","",39,[[["self"]],["t"]]],[11,"type_id","","",39,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_string","","",5,[[["self"]],["string"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","oak::grpc","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",14,[[["t"]],["t"]]],[11,"into","","",14,[[],["u"]]],[11,"try_from","","",14,[[["u"]],["result"]]],[11,"try_into","","",14,[[],["result"]]],[11,"borrow","","",14,[[["self"]],["t"]]],[11,"borrow_mut","","",14,[[["self"]],["t"]]],[11,"type_id","","",14,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","oak::grpc::client","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","oak::io","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"to_owned","","",16,[[["self"]],["t"]]],[11,"clone_into","","",16,[[["self"],["t"]]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"from","oak::rand","",40,[[["t"]],["t"]]],[11,"into","","",40,[[],["u"]]],[11,"to_owned","","",40,[[["self"]],["t"]]],[11,"clone_into","","",40,[[["self"],["t"]]]],[11,"try_from","","",40,[[["u"]],["result"]]],[11,"try_into","","",40,[[],["result"]]],[11,"borrow","","",40,[[["self"]],["t"]]],[11,"borrow_mut","","",40,[[["self"]],["t"]]],[11,"type_id","","",40,[[["self"]],["typeid"]]],[11,"from","oak::roughtime","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"from","oak::storage","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"from","oak::proto::oak::storage","",22,[[["t"]],["t"]]],[11,"into","","",22,[[],["u"]]],[11,"to_owned","","",22,[[["self"]],["t"]]],[11,"clone_into","","",22,[[["self"],["t"]]]],[11,"try_from","","",22,[[["u"]],["result"]]],[11,"try_into","","",22,[[],["result"]]],[11,"borrow","","",22,[[["self"]],["t"]]],[11,"borrow_mut","","",22,[[["self"]],["t"]]],[11,"type_id","","",22,[[["self"]],["typeid"]]],[11,"from","","",23,[[["t"]],["t"]]],[11,"into","","",23,[[],["u"]]],[11,"to_owned","","",23,[[["self"]],["t"]]],[11,"clone_into","","",23,[[["self"],["t"]]]],[11,"try_from","","",23,[[["u"]],["result"]]],[11,"try_into","","",23,[[],["result"]]],[11,"borrow","","",23,[[["self"]],["t"]]],[11,"borrow_mut","","",23,[[["self"]],["t"]]],[11,"type_id","","",23,[[["self"]],["typeid"]]],[11,"from","","",24,[[["t"]],["t"]]],[11,"into","","",24,[[],["u"]]],[11,"to_owned","","",24,[[["self"]],["t"]]],[11,"clone_into","","",24,[[["self"],["t"]]]],[11,"try_from","","",24,[[["u"]],["result"]]],[11,"try_into","","",24,[[],["result"]]],[11,"borrow","","",24,[[["self"]],["t"]]],[11,"borrow_mut","","",24,[[["self"]],["t"]]],[11,"type_id","","",24,[[["self"]],["typeid"]]],[11,"from","","",25,[[["t"]],["t"]]],[11,"into","","",25,[[],["u"]]],[11,"to_owned","","",25,[[["self"]],["t"]]],[11,"clone_into","","",25,[[["self"],["t"]]]],[11,"try_from","","",25,[[["u"]],["result"]]],[11,"try_into","","",25,[[],["result"]]],[11,"borrow","","",25,[[["self"]],["t"]]],[11,"borrow_mut","","",25,[[["self"]],["t"]]],[11,"type_id","","",25,[[["self"]],["typeid"]]],[11,"from","","",41,[[["t"]],["t"]]],[11,"into","","",41,[[],["u"]]],[11,"to_owned","","",41,[[["self"]],["t"]]],[11,"clone_into","","",41,[[["self"],["t"]]]],[11,"try_from","","",41,[[["u"]],["result"]]],[11,"try_into","","",41,[[],["result"]]],[11,"borrow","","",41,[[["self"]],["t"]]],[11,"borrow_mut","","",41,[[["self"]],["t"]]],[11,"type_id","","",41,[[["self"]],["typeid"]]],[11,"from","","",26,[[["t"]],["t"]]],[11,"into","","",26,[[],["u"]]],[11,"to_owned","","",26,[[["self"]],["t"]]],[11,"clone_into","","",26,[[["self"],["t"]]]],[11,"try_from","","",26,[[["u"]],["result"]]],[11,"try_into","","",26,[[],["result"]]],[11,"borrow","","",26,[[["self"]],["t"]]],[11,"borrow_mut","","",26,[[["self"]],["t"]]],[11,"type_id","","",26,[[["self"]],["typeid"]]],[11,"from","","",42,[[["t"]],["t"]]],[11,"into","","",42,[[],["u"]]],[11,"to_owned","","",42,[[["self"]],["t"]]],[11,"clone_into","","",42,[[["self"],["t"]]]],[11,"try_from","","",42,[[["u"]],["result"]]],[11,"try_into","","",42,[[],["result"]]],[11,"borrow","","",42,[[["self"]],["t"]]],[11,"borrow_mut","","",42,[[["self"]],["t"]]],[11,"type_id","","",42,[[["self"]],["typeid"]]],[11,"from","","",27,[[["t"]],["t"]]],[11,"into","","",27,[[],["u"]]],[11,"to_owned","","",27,[[["self"]],["t"]]],[11,"clone_into","","",27,[[["self"],["t"]]]],[11,"try_from","","",27,[[["u"]],["result"]]],[11,"try_into","","",27,[[],["result"]]],[11,"borrow","","",27,[[["self"]],["t"]]],[11,"borrow_mut","","",27,[[["self"]],["t"]]],[11,"type_id","","",27,[[["self"]],["typeid"]]],[11,"from","","",28,[[["t"]],["t"]]],[11,"into","","",28,[[],["u"]]],[11,"to_owned","","",28,[[["self"]],["t"]]],[11,"clone_into","","",28,[[["self"],["t"]]]],[11,"try_from","","",28,[[["u"]],["result"]]],[11,"try_into","","",28,[[],["result"]]],[11,"borrow","","",28,[[["self"]],["t"]]],[11,"borrow_mut","","",28,[[["self"]],["t"]]],[11,"type_id","","",28,[[["self"]],["typeid"]]],[11,"from","","",29,[[["t"]],["t"]]],[11,"into","","",29,[[],["u"]]],[11,"to_owned","","",29,[[["self"]],["t"]]],[11,"clone_into","","",29,[[["self"],["t"]]]],[11,"try_from","","",29,[[["u"]],["result"]]],[11,"try_into","","",29,[[],["result"]]],[11,"borrow","","",29,[[["self"]],["t"]]],[11,"borrow_mut","","",29,[[["self"]],["t"]]],[11,"type_id","","",29,[[["self"]],["typeid"]]],[11,"from","","",43,[[["t"]],["t"]]],[11,"into","","",43,[[],["u"]]],[11,"to_owned","","",43,[[["self"]],["t"]]],[11,"clone_into","","",43,[[["self"],["t"]]]],[11,"try_from","","",43,[[["u"]],["result"]]],[11,"try_into","","",43,[[],["result"]]],[11,"borrow","","",43,[[["self"]],["t"]]],[11,"borrow_mut","","",43,[[["self"]],["t"]]],[11,"type_id","","",43,[[["self"]],["typeid"]]],[11,"from","","",30,[[["t"]],["t"]]],[11,"into","","",30,[[],["u"]]],[11,"to_owned","","",30,[[["self"]],["t"]]],[11,"clone_into","","",30,[[["self"],["t"]]]],[11,"try_from","","",30,[[["u"]],["result"]]],[11,"try_into","","",30,[[],["result"]]],[11,"borrow","","",30,[[["self"]],["t"]]],[11,"borrow_mut","","",30,[[["self"]],["t"]]],[11,"type_id","","",30,[[["self"]],["typeid"]]],[11,"from","","",44,[[["t"]],["t"]]],[11,"into","","",44,[[],["u"]]],[11,"to_owned","","",44,[[["self"]],["t"]]],[11,"clone_into","","",44,[[["self"],["t"]]]],[11,"try_from","","",44,[[["u"]],["result"]]],[11,"try_into","","",44,[[],["result"]]],[11,"borrow","","",44,[[["self"]],["t"]]],[11,"borrow_mut","","",44,[[["self"]],["t"]]],[11,"type_id","","",44,[[["self"]],["typeid"]]],[11,"handle_command","","Handle incoming gRPC events for an [`ServerNode`].",33,[[["invocation"],["self"]],[["result",["oakerror"]],["oakerror"]]]],[11,"from","","",33,[[["t"]],["t"]]],[11,"into","","",33,[[],["u"]]],[11,"try_from","","",33,[[["u"]],["result"]]],[11,"try_into","","",33,[[],["result"]]],[11,"borrow","","",33,[[["self"]],["t"]]],[11,"borrow_mut","","",33,[[["self"]],["t"]]],[11,"type_id","","",33,[[["self"]],["typeid"]]],[11,"from","","",31,[[["t"]],["t"]]],[11,"into","","",31,[[],["u"]]],[11,"try_from","","",31,[[["u"]],["result"]]],[11,"try_into","","",31,[[],["result"]]],[11,"borrow","","",31,[[["self"]],["t"]]],[11,"borrow_mut","","",31,[[["self"]],["t"]]],[11,"type_id","","",31,[[["self"]],["typeid"]]],[11,"from","oak::proto::oak::roughtime","",45,[[["t"]],["t"]]],[11,"into","","",45,[[],["u"]]],[11,"to_owned","","",45,[[["self"]],["t"]]],[11,"clone_into","","",45,[[["self"],["t"]]]],[11,"try_from","","",45,[[["u"]],["result"]]],[11,"try_into","","",45,[[],["result"]]],[11,"borrow","","",45,[[["self"]],["t"]]],[11,"borrow_mut","","",45,[[["self"]],["t"]]],[11,"type_id","","",45,[[["self"]],["typeid"]]],[11,"from","","",34,[[["t"]],["t"]]],[11,"into","","",34,[[],["u"]]],[11,"to_owned","","",34,[[["self"]],["t"]]],[11,"clone_into","","",34,[[["self"],["t"]]]],[11,"try_from","","",34,[[["u"]],["result"]]],[11,"try_into","","",34,[[],["result"]]],[11,"borrow","","",34,[[["self"]],["t"]]],[11,"borrow_mut","","",34,[[["self"]],["t"]]],[11,"type_id","","",34,[[["self"]],["typeid"]]],[11,"handle_command","","Handle incoming gRPC events for an [`ServerNode`].",37,[[["invocation"],["self"]],[["result",["oakerror"]],["oakerror"]]]],[11,"from","","",37,[[["t"]],["t"]]],[11,"into","","",37,[[],["u"]]],[11,"try_from","","",37,[[["u"]],["result"]]],[11,"try_into","","",37,[[],["result"]]],[11,"borrow","","",37,[[["self"]],["t"]]],[11,"borrow_mut","","",37,[[["self"]],["t"]]],[11,"type_id","","",37,[[["self"]],["typeid"]]],[11,"from","","",35,[[["t"]],["t"]]],[11,"into","","",35,[[],["u"]]],[11,"try_from","","",35,[[["u"]],["result"]]],[11,"try_into","","",35,[[],["result"]]],[11,"borrow","","",35,[[["self"]],["t"]]],[11,"borrow_mut","","",35,[[["self"]],["t"]]],[11,"type_id","","",35,[[["self"]],["typeid"]]],[11,"hash","oak","",0,[[["self"],["__h"]]]],[11,"hash","","",1,[[["self"],["__h"]]]],[11,"hash","","",2,[[["self"],["__h"]]]],[11,"hash","oak::grpc","",7,[[["self"],["__h"]]]],[11,"eq","","",9,[[["grpcresponse"],["self"]],["bool"]]],[11,"ne","","",9,[[["grpcresponse"],["self"]],["bool"]]],[11,"eq","","",6,[[["status"],["self"]],["bool"]]],[11,"ne","","",6,[[["status"],["self"]],["bool"]]],[11,"eq","oak","",0,[[["label"],["self"]],["bool"]]],[11,"ne","","",0,[[["label"],["self"]],["bool"]]],[11,"eq","","",1,[[["channelreadstatus"],["self"]],["bool"]]],[11,"eq","oak::grpc","",8,[[["self"],["grpcrequest"]],["bool"]]],[11,"ne","","",8,[[["self"],["grpcrequest"]],["bool"]]],[11,"eq","oak","",2,[[["oakstatus"],["self"]],["bool"]]],[11,"eq","oak::grpc","",7,[[["self"],["code"]],["bool"]]],[11,"partial_cmp","oak","",1,[[["channelreadstatus"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","","",2,[[["oakstatus"],["self"]],[["ordering"],["option",["ordering"]]]]],[11,"partial_cmp","oak::grpc","",7,[[["self"],["code"]],[["ordering"],["option",["ordering"]]]]],[11,"cmp","","",7,[[["self"],["code"]],["ordering"]]],[11,"cmp","oak","",1,[[["channelreadstatus"],["self"]],["ordering"]]],[11,"cmp","","",2,[[["oakstatus"],["self"]],["ordering"]]],[11,"fmt","oak::grpc","",9,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","oak","",0,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","oak::grpc","",7,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",6,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",8,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","oak","",2,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"fmt","","",1,[[["self"],["formatter"]],[["error"],["result",["error"]]]]],[11,"default","","",1,[[],["channelreadstatus"]]],[11,"default","","",2,[[],["oakstatus"]]],[11,"default","oak::grpc","",9,[[],["grpcresponse"]]],[11,"default","oak","",0,[[],["label"]]],[11,"default","oak::grpc","",7,[[],["code"]]],[11,"default","","",8,[[],["grpcrequest"]]],[11,"default","","",6,[[],["status"]]],[11,"encode_raw","","",9,[[["self"],["b"]]]],[11,"merge_field","","",9,[[["u32"],["b"],["self"],["wiretype"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",9,[[["self"]],["usize"]]],[11,"clear","","",9,[[["self"]]]],[11,"encode_raw","","",8,[[["self"],["b"]]]],[11,"merge_field","","",8,[[["u32"],["b"],["self"],["wiretype"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",8,[[["self"]],["usize"]]],[11,"clear","","",8,[[["self"]]]],[11,"encode_raw","oak","",0,[[["self"],["b"]]]],[11,"merge_field","","",0,[[["u32"],["b"],["self"],["wiretype"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",0,[[["self"]],["usize"]]],[11,"clear","","",0,[[["self"]]]],[11,"encode_raw","oak::grpc","",6,[[["self"],["b"]]]],[11,"merge_field","","",6,[[["u32"],["b"],["self"],["wiretype"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",6,[[["self"]],["usize"]]],[11,"clear","","",6,[[["self"]]]],[11,"clone","","",9,[[["self"]],["grpcresponse"]]],[11,"clone","oak","",2,[[["self"]],["oakstatus"]]],[11,"clone","oak::grpc","",6,[[["self"]],["status"]]],[11,"clone","oak","",1,[[["self"]],["channelreadstatus"]]],[11,"clone","oak::grpc","",8,[[["self"]],["grpcrequest"]]],[11,"clone","","",7,[[["self"]],["code"]]],[11,"clone","oak","",0,[[["self"]],["label"]]],[11,"invoke","oak::proto::oak::storage","",33,[[["str"],["channelresponsewriter"],["self"]]]],[11,"invoke","oak::proto::oak::roughtime","",37,[[["str"],["channelresponsewriter"],["self"]]]],[11,"decode","oak::grpc","",10,[[["message"]],[["result",["oakerror"]],["oakerror"]]]],[11,"encode","","",10,[[["self"]],[["result",["message","oakerror"]],["message"],["oakerror"]]]],[11,"from","oak","",5,[[["decodeerror"]],["self"]]],[11,"from","","",5,[[["encodeerror"]],["self"]]],[11,"from","","",5,[[["error"]],["self"]]],[11,"from","","",5,[[["oakstatus"]],["self"]]],[11,"clone","oak::grpc","",11,[[["self"]],["writemode"]]],[11,"clone","oak::io","",15,[[["self"]],["receiver"]]],[11,"clone","","",16,[[["self"]],["sender"]]],[11,"clone","oak::rand","",40,[[["self"]],["oakrng"]]],[11,"clone","oak::proto::oak::storage","",22,[[["self"]],["storageitem"]]],[11,"clone","","",23,[[["self"]],["storagechannelreadrequest"]]],[11,"clone","","",24,[[["self"]],["storagechannelreadresponse"]]],[11,"clone","","",25,[[["self"]],["storagechannelwriterequest"]]],[11,"clone","","",41,[[["self"]],["storagechannelwriteresponse"]]],[11,"clone","","",26,[[["self"]],["storagechanneldeleterequest"]]],[11,"clone","","",42,[[["self"]],["storagechanneldeleteresponse"]]],[11,"clone","","",27,[[["self"]],["storagechannelbeginrequest"]]],[11,"clone","","",28,[[["self"]],["storagechannelbeginresponse"]]],[11,"clone","","",29,[[["self"]],["storagechannelcommitrequest"]]],[11,"clone","","",43,[[["self"]],["storagechannelcommitresponse"]]],[11,"clone","","",30,[[["self"]],["storagechannelrollbackrequest"]]],[11,"clone","","",44,[[["self"]],["storagechannelrollbackresponse"]]],[11,"clone","oak::proto::oak::roughtime","",45,[[["self"]],["roughtimerequest"]]],[11,"clone","","",34,[[["self"]],["roughtimeresponse"]]],[11,"clone","oak","",39,[[["self"]],["handle"]]],[11,"clone","","",3,[[["self"]],["readhandle"]]],[11,"clone","","",4,[[["self"]],["writehandle"]]],[11,"default","oak::proto::oak::storage","",22,[[],["storageitem"]]],[11,"default","","",23,[[],["storagechannelreadrequest"]]],[11,"default","","",24,[[],["storagechannelreadresponse"]]],[11,"default","","",25,[[],["storagechannelwriterequest"]]],[11,"default","","",41,[[],["storagechannelwriteresponse"]]],[11,"default","","",26,[[],["storagechanneldeleterequest"]]],[11,"default","","",42,[[],["storagechanneldeleteresponse"]]],[11,"default","","",27,[[],["storagechannelbeginrequest"]]],[11,"default","","",28,[[],["storagechannelbeginresponse"]]],[11,"default","","",29,[[],["storagechannelcommitrequest"]]],[11,"default","","",43,[[],["storagechannelcommitresponse"]]],[11,"default","","",30,[[],["storagechannelrollbackrequest"]]],[11,"default","","",44,[[],["storagechannelrollbackresponse"]]],[11,"default","oak::proto::oak::roughtime","",45,[[],["roughtimerequest"]]],[11,"default","","",34,[[],["roughtimeresponse"]]],[11,"eq","oak::grpc","",11,[[["writemode"],["self"]],["bool"]]],[11,"eq","oak::io","",15,[[["receiver"],["self"]],["bool"]]],[11,"ne","","",15,[[["receiver"],["self"]],["bool"]]],[11,"eq","","",16,[[["self"],["sender"]],["bool"]]],[11,"ne","","",16,[[["self"],["sender"]],["bool"]]],[11,"eq","","",17,[[["self"],["message"]],["bool"]]],[11,"ne","","",17,[[["self"],["message"]],["bool"]]],[11,"eq","oak::proto::oak::storage","",22,[[["storageitem"],["self"]],["bool"]]],[11,"ne","","",22,[[["storageitem"],["self"]],["bool"]]],[11,"eq","","",23,[[["self"],["storagechannelreadrequest"]],["bool"]]],[11,"ne","","",23,[[["self"],["storagechannelreadrequest"]],["bool"]]],[11,"eq","","",24,[[["self"],["storagechannelreadresponse"]],["bool"]]],[11,"ne","","",24,[[["self"],["storagechannelreadresponse"]],["bool"]]],[11,"eq","","",25,[[["storagechannelwriterequest"],["self"]],["bool"]]],[11,"ne","","",25,[[["storagechannelwriterequest"],["self"]],["bool"]]],[11,"eq","","",41,[[["self"],["storagechannelwriteresponse"]],["bool"]]],[11,"eq","","",26,[[["storagechanneldeleterequest"],["self"]],["bool"]]],[11,"ne","","",26,[[["storagechanneldeleterequest"],["self"]],["bool"]]],[11,"eq","","",42,[[["self"],["storagechanneldeleteresponse"]],["bool"]]],[11,"eq","","",27,[[["self"],["storagechannelbeginrequest"]],["bool"]]],[11,"ne","","",27,[[["self"],["storagechannelbeginrequest"]],["bool"]]],[11,"eq","","",28,[[["self"],["storagechannelbeginresponse"]],["bool"]]],[11,"ne","","",28,[[["self"],["storagechannelbeginresponse"]],["bool"]]],[11,"eq","","",29,[[["self"],["storagechannelcommitrequest"]],["bool"]]],[11,"ne","","",29,[[["self"],["storagechannelcommitrequest"]],["bool"]]],[11,"eq","","",43,[[["self"],["storagechannelcommitresponse"]],["bool"]]],[11,"eq","","",30,[[["storagechannelrollbackrequest"],["self"]],["bool"]]],[11,"ne","","",30,[[["storagechannelrollbackrequest"],["self"]],["bool"]]],[11,"eq","","",44,[[["self"],["storagechannelrollbackresponse"]],["bool"]]],[11,"eq","oak::proto::oak::roughtime","",45,[[["self"],["roughtimerequest"]],["bool"]]],[11,"eq","","",34,[[["self"],["roughtimeresponse"]],["bool"]]],[11,"ne","","",34,[[["self"],["roughtimeresponse"]],["bool"]]],[11,"eq","oak","",39,[[["self"],["handle"]],["bool"]]],[11,"ne","","",39,[[["self"],["handle"]],["bool"]]],[11,"eq","","",3,[[["readhandle"],["self"]],["bool"]]],[11,"ne","","",3,[[["readhandle"],["self"]],["bool"]]],[11,"eq","","",4,[[["writehandle"],["self"]],["bool"]]],[11,"ne","","",4,[[["writehandle"],["self"]],["bool"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak::grpc","",11,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak::io","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",16,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",17,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak::rand","",40,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak::proto::oak::storage","",22,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",23,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",24,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",25,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",41,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",26,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",42,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",27,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",28,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",29,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",43,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",30,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",44,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak::proto::oak::roughtime","",45,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",34,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak","",39,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",5,[[["formatter"],["self"]],["result"]]],[11,"hash","","",39,[[["self"],["__h"]]]],[11,"serialize","oak::io","",15,[[["self"],["__s"]],["result"]]],[11,"serialize","","",16,[[["self"],["__s"]],["result"]]],[11,"serialize","oak","",39,[[["s"],["self"]],["result"]]],[11,"serialize","","",3,[[["self"],["__s"]],["result"]]],[11,"serialize","","",4,[[["self"],["__s"]],["result"]]],[11,"deserialize","oak::io","",15,[[["__d"]],["result"]]],[11,"deserialize","","",16,[[["__d"]],["result"]]],[11,"deserialize","oak","",39,[[["d"]],["result"]]],[11,"deserialize","","",3,[[["__d"]],["result"]]],[11,"deserialize","","",4,[[["__d"]],["result"]]],[11,"encode_raw","oak::proto::oak::storage","",22,[[["self"],["b"]]]],[11,"merge_field","","",22,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",22,[[["self"]],["usize"]]],[11,"clear","","",22,[[["self"]]]],[11,"encode_raw","","",23,[[["self"],["b"]]]],[11,"merge_field","","",23,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",23,[[["self"]],["usize"]]],[11,"clear","","",23,[[["self"]]]],[11,"encode_raw","","",24,[[["self"],["b"]]]],[11,"merge_field","","",24,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",24,[[["self"]],["usize"]]],[11,"clear","","",24,[[["self"]]]],[11,"encode_raw","","",25,[[["self"],["b"]]]],[11,"merge_field","","",25,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",25,[[["self"]],["usize"]]],[11,"clear","","",25,[[["self"]]]],[11,"encode_raw","","",41,[[["self"],["b"]]]],[11,"merge_field","","",41,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",41,[[["self"]],["usize"]]],[11,"clear","","",41,[[["self"]]]],[11,"encode_raw","","",26,[[["self"],["b"]]]],[11,"merge_field","","",26,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",26,[[["self"]],["usize"]]],[11,"clear","","",26,[[["self"]]]],[11,"encode_raw","","",42,[[["self"],["b"]]]],[11,"merge_field","","",42,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",42,[[["self"]],["usize"]]],[11,"clear","","",42,[[["self"]]]],[11,"encode_raw","","",27,[[["self"],["b"]]]],[11,"merge_field","","",27,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",27,[[["self"]],["usize"]]],[11,"clear","","",27,[[["self"]]]],[11,"encode_raw","","",28,[[["self"],["b"]]]],[11,"merge_field","","",28,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",28,[[["self"]],["usize"]]],[11,"clear","","",28,[[["self"]]]],[11,"encode_raw","","",29,[[["self"],["b"]]]],[11,"merge_field","","",29,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",29,[[["self"]],["usize"]]],[11,"clear","","",29,[[["self"]]]],[11,"encode_raw","","",43,[[["self"],["b"]]]],[11,"merge_field","","",43,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",43,[[["self"]],["usize"]]],[11,"clear","","",43,[[["self"]]]],[11,"encode_raw","","",30,[[["self"],["b"]]]],[11,"merge_field","","",30,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",30,[[["self"]],["usize"]]],[11,"clear","","",30,[[["self"]]]],[11,"encode_raw","","",44,[[["self"],["b"]]]],[11,"merge_field","","",44,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",44,[[["self"]],["usize"]]],[11,"clear","","",44,[[["self"]]]],[11,"encode_raw","oak::proto::oak::roughtime","",45,[[["self"],["b"]]]],[11,"merge_field","","",45,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",45,[[["self"]],["usize"]]],[11,"clear","","",45,[[["self"]]]],[11,"encode_raw","","",34,[[["self"],["b"]]]],[11,"merge_field","","",34,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["decodeerror"],["result",["decodeerror"]]]]],[11,"encoded_len","","",34,[[["self"]],["usize"]]],[11,"clear","","",34,[[["self"]]]],[11,"next_u32","oak::rand","",40,[[["self"]],["u32"]]],[11,"next_u64","","",40,[[["self"]],["u64"]]],[11,"fill_bytes","","",40,[[["self"]]]],[11,"try_fill_bytes","","",40,[[["self"]],[["result",["error"]],["error"]]]],[11,"serialize","oak","Convert a label to bytes.",0,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"deserialize","","Build the label from bytes.",0,[[],[["option",["label"]],["label"]]]],[11,"public_trusted","","Return the least privileged label.",0,[[],["label"]]],[11,"flows_to","","Compare two labels according to the lattice structure: L_0â€¦",0,[[["label"],["self"]],["bool"]]],[11,"is_valid","","Returns `true` if `value` is a variant ofâ€¦",1,[[["i32"]],["bool"]]],[11,"from_i32","","Converts an `i32` to a `ChannelReadStatus`, or `None` ifâ€¦",1,[[["i32"]],[["channelreadstatus"],["option",["channelreadstatus"]]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `OakStatus`.",2,[[["i32"]],["bool"]]],[11,"from_i32","","Converts an `i32` to a `OakStatus`, or `None` if `value`â€¦",2,[[["i32"]],[["oakstatus"],["option",["oakstatus"]]]]],[11,"is_valid","oak::grpc","Returns `true` if `value` is a variant of `Code`.",7,[[["i32"]],["bool"]]],[11,"from_i32","","Converts an `i32` to a `Code`, or `None` if `value` is notâ€¦",7,[[["i32"]],[["option",["code"]],["code"]]]]],"p":[[3,"Label"],[4,"ChannelReadStatus"],[4,"OakStatus"],[3,"ReadHandle"],[3,"WriteHandle"],[4,"OakError"],[3,"Status"],[4,"Code"],[3,"GrpcRequest"],[3,"GrpcResponse"],[3,"Invocation"],[4,"WriteMode"],[3,"Client"],[8,"ServerNode"],[3,"ChannelResponseWriter"],[3,"Receiver"],[3,"Sender"],[3,"Message"],[8,"Decodable"],[8,"Encodable"],[3,"Roughtime"],[3,"Storage"],[3,"StorageItem"],[3,"StorageChannelReadRequest"],[3,"StorageChannelReadResponse"],[3,"StorageChannelWriteRequest"],[3,"StorageChannelDeleteRequest"],[3,"StorageChannelBeginRequest"],[3,"StorageChannelBeginResponse"],[3,"StorageChannelCommitRequest"],[3,"StorageChannelRollbackRequest"],[3,"StorageServiceClient"],[8,"StorageService"],[3,"StorageServiceDispatcher"],[3,"RoughTimeResponse"],[3,"RoughtimeServiceClient"],[8,"RoughtimeService"],[3,"RoughtimeServiceDispatcher"],[8,"Node"],[3,"Handle"],[3,"OakRng"],[3,"StorageChannelWriteResponse"],[3,"StorageChannelDeleteResponse"],[3,"StorageChannelCommitResponse"],[3,"StorageChannelRollbackResponse"],[3,"RoughTimeRequest"]]};
searchIndex["oak_abi"] = {"doc":"Type, constant and Wasm host function definitions for theâ€¦","i":[[5,"wait_on_channels","oak_abi","Wait for channels to be ready for reading.",null,null],[5,"channel_read","","Read a message from a channel.",null,null],[5,"channel_write","","Write a message to a channel.",null,null],[5,"channel_create","","Create a new unidirectional channel.",null,null],[5,"channel_close","","Close a channel.",null,null],[5,"node_create","","Create a new Node instance running code identified byâ€¦",null,null],[5,"random_get","","Fill a buffer with random data.",null,null],[0,"grpc","","",null,null],[5,"encap_request","oak_abi::grpc","Encapsulate a protocol buffer message in a GrpcRequestâ€¦",null,[[["str"],["t"]],[["grpcrequest"],["option",["grpcrequest"]]]]],[0,"label","oak_abi","Labels represent the kinds of information that is allowedâ€¦",null,null],[5,"authorization_bearer_token_hmac_tag","oak_abi::label","Creates a [`Tag`] having as principal the providedâ€¦",null,[[],["tag"]]],[0,"proto","oak_abi","",null,null],[0,"google","oak_abi::proto","",null,null],[0,"rpc","oak_abi::proto::google","",null,null],[3,"Status","oak_abi::proto::google::rpc","The `Status` type defines a logical error model that isâ€¦",null,null],[12,"code","","The status code, which should be an enum value ofâ€¦",0,null],[12,"message","","A developer-facing error message, which should be inâ€¦",0,null],[12,"details","","A list of messages that carry the error details. There isâ€¦",0,null],[4,"Code","","The canonical error codes for Google APIs.",null,null],[13,"Ok","","Not an error; returned on success",1,null],[13,"Cancelled","","The operation was cancelled, typically by the caller.",1,null],[13,"Unknown","","Unknown error. For example, this error may be returnedâ€¦",1,null],[13,"InvalidArgument","","The client specified an invalid argument. Note that thisâ€¦",1,null],[13,"DeadlineExceeded","","The deadline expired before the operation could complete.â€¦",1,null],[13,"NotFound","","Some requested entity (e.g., file or directory) was notâ€¦",1,null],[13,"AlreadyExists","","The entity that a client attempted to create (e.g., fileâ€¦",1,null],[13,"PermissionDenied","","The caller does not have permission to execute theâ€¦",1,null],[13,"Unauthenticated","","The request does not have valid authentication credentialsâ€¦",1,null],[13,"ResourceExhausted","","Some resource has been exhausted, perhaps a per-userâ€¦",1,null],[13,"FailedPrecondition","","The operation was rejected because the system is not in aâ€¦",1,null],[13,"Aborted","","The operation was aborted, typically due to a concurrencyâ€¦",1,null],[13,"OutOfRange","","The operation was attempted past the valid range. E.g.,â€¦",1,null],[13,"Unimplemented","","The operation is not implemented or is notâ€¦",1,null],[13,"Internal","","Internal errors. This means that some invariants expectedâ€¦",1,null],[13,"Unavailable","","The service is currently unavailable. This is most likelyâ€¦",1,null],[13,"DataLoss","","Unrecoverable data loss or corruption.",1,null],[11,"is_valid","","Returns `true` if `value` is a variant of `Code`.",1,[[["i32"]],["bool"]]],[11,"from_i32","","Converts an `i32` to a `Code`, or `None` if `value` is notâ€¦",1,[[["i32"]],[["option",["code"]],["code"]]]],[0,"oak","oak_abi::proto","",null,null],[4,"OakStatus","oak_abi::proto::oak","Status values exchanged as i32 values across the Node Wasmâ€¦",null,null],[13,"Unspecified","","",2,null],[13,"Ok","","Success.",2,null],[13,"ErrBadHandle","","Invalid handle provided.",2,null],[13,"ErrInvalidArgs","","Arguments invalid.",2,null],[13,"ErrChannelClosed","","Channel has been closed.",2,null],[13,"ErrBufferTooSmall","","Provided buffer was too small for operation (an outputâ€¦",2,null],[13,"ErrHandleSpaceTooSmall","","Provided handle space was too small for operation (anâ€¦",2,null],[13,"ErrOutOfRange","","Argument out of valid range.",2,null],[13,"ErrInternal","","Internal error.",2,null],[13,"ErrTerminated","","Node terminated.",2,null],[13,"ErrChannelEmpty","","Channel has no messages available to read.",2,null],[13,"ErrPermissionDenied","","The node does not have sufficient permissions to performâ€¦",2,null],[4,"ChannelReadStatus","","Single byte values used to indicate the read status of aâ€¦",null,null],[13,"NotReady","","No pending messages available on channel.",3,null],[13,"ReadReady","","Pending message available on channel.",3,null],[13,"InvalidChannel","","Channel handle does not identify the read half of aâ€¦",3,null],[13,"Orphaned","","Channel has no extant write halves (and is empty).",3,null],[0,"label","","",null,null],[3,"Label","oak_abi::proto::oak::label","Label represents information flowing through a Node orâ€¦",null,null],[12,"secrecy_tags","","",4,null],[12,"integrity_tags","","",4,null],[3,"Tag","","Tag represents a category of secrecy or integrity that isâ€¦",null,null],[12,"tag","","",5,null],[3,"GrpcTag","","Policies related to gRPC communication, referring to theâ€¦",null,null],[12,"authorization_bearer_token_hmac","","In order for a client to be authorized to fulfill a tagâ€¦",6,null],[3,"WebAssemblyModuleTag","","Policies related to modules, referring to the nativeâ€¦",null,null],[12,"module_attestation","","The attestation for a single WebAssembly module, a SHA256â€¦",7,null],[3,"TlsEndpointTag","","Policies related to HTTPS communication.",null,null],[12,"certificate_subject_alternative_name","","The Subject Alternative Name (SAN) of a certificate that aâ€¦",8,null],[0,"tag","","",null,null],[4,"Tag","oak_abi::proto::oak::label::tag","",null,null],[13,"GrpcTag","","",9,null],[13,"WebAssemblyModuleTag","","",9,null],[13,"TlsEndpointTag","","",9,null],[11,"encode","","",9,[[["self"],["b"]]]],[11,"merge","","",9,[[["option"],["u32"],["wiretype"],["b"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",9,[[["self"]],["usize"]]],[0,"encap","oak_abi::proto::oak","",null,null],[3,"GrpcRequest","oak_abi::proto::oak::encap","",null,null],[12,"method_name","","",10,null],[12,"req_msg","","The body of the request. Usually a serialized protobufâ€¦",10,null],[12,"last","","",10,null],[3,"GrpcResponse","","",null,null],[12,"rsp_msg","","The body of the response. Usually a serialized protobufâ€¦",11,null],[12,"status","","",11,null],[12,"last","","The last field indicates that this is definitely the finalâ€¦",11,null],[0,"log","oak_abi::proto::oak","",null,null],[3,"LogMessage","oak_abi::proto::oak::log","This message defines the data that is passed as a logâ€¦",null,null],[12,"file","","The source file containing the message.",12,null],[12,"line","","The line containing the message.",12,null],[12,"level","","The verbosity level of the message.",12,null],[12,"message","","The message body.",12,null],[4,"Level","","Logging levels as defined inâ€¦",null,null],[13,"UnknownLevel","","",13,null],[13,"Error","","",13,null],[13,"Warn","","",13,null],[13,"Info","","",13,null],[13,"Debugging","","",13,null],[13,"Trace","","",13,null],[11,"level","","Returns the enum value of `level`, or the default if theâ€¦",12,[[["self"]],["level"]]],[11,"set_level","","Sets `level` to the provided enum value.",12,[[["level"],["self"]]]],[11,"is_valid","","Returns `true` if `value` is a variant of `Level`.",13,[[["i32"]],["bool"]]],[11,"from_i32","","Converts an `i32` to a `Level`, or `None` if `value` isâ€¦",13,[[["i32"]],[["level"],["option",["level"]]]]],[11,"is_valid","oak_abi::proto::oak","Returns `true` if `value` is a variant of `OakStatus`.",2,[[["i32"]],["bool"]]],[11,"from_i32","","Converts an `i32` to a `OakStatus`, or `None` if `value`â€¦",2,[[["i32"]],[["oakstatus"],["option",["oakstatus"]]]]],[11,"is_valid","","Returns `true` if `value` is a variant ofâ€¦",3,[[["i32"]],["bool"]]],[11,"from_i32","","Converts an `i32` to a `ChannelReadStatus`, or `None` ifâ€¦",3,[[["i32"]],[["option",["channelreadstatus"]],["channelreadstatus"]]]],[6,"Handle","oak_abi","Handle used to identify read or write channel halves.",null,null],[6,"NodeMainC","","Expected type for a Node entrypoint that is exposed as aâ€¦",null,null],[6,"NodeMain","","Expected Rust type for a Node entrypoint.",null,null],[17,"SPACE_BYTES_PER_HANDLE","","Number of bytes needed per-handle for channel readinessâ€¦",null,null],[17,"INVALID_HANDLE","","Invalid handle value.",null,null],[11,"from","oak_abi::proto::google::rpc","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","oak_abi::proto::oak","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","oak_abi::proto::oak::label","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"from","oak_abi::proto::oak::label::tag","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"from","oak_abi::proto::oak::encap","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"to_owned","","",10,[[["self"]],["t"]]],[11,"clone_into","","",10,[[["self"],["t"]]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"from","","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"to_owned","","",11,[[["self"]],["t"]]],[11,"clone_into","","",11,[[["self"],["t"]]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"from","oak_abi::proto::oak::log","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_owned","","",12,[[["self"]],["t"]]],[11,"clone_into","","",12,[[["self"],["t"]]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"from","","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"to_owned","","",13,[[["self"]],["t"]]],[11,"clone_into","","",13,[[["self"],["t"]]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"clone","oak_abi::proto::google::rpc","",0,[[["self"]],["status"]]],[11,"clone","","",1,[[["self"]],["code"]]],[11,"clone","oak_abi::proto::oak","",2,[[["self"]],["oakstatus"]]],[11,"clone","","",3,[[["self"]],["channelreadstatus"]]],[11,"clone","oak_abi::proto::oak::label","",4,[[["self"]],["label"]]],[11,"clone","","",5,[[["self"]],["tag"]]],[11,"clone","oak_abi::proto::oak::label::tag","",9,[[["self"]],["tag"]]],[11,"clone","oak_abi::proto::oak::label","",6,[[["self"]],["grpctag"]]],[11,"clone","","",7,[[["self"]],["webassemblymoduletag"]]],[11,"clone","","",8,[[["self"]],["tlsendpointtag"]]],[11,"clone","oak_abi::proto::oak::encap","",10,[[["self"]],["grpcrequest"]]],[11,"clone","","",11,[[["self"]],["grpcresponse"]]],[11,"clone","oak_abi::proto::oak::log","",12,[[["self"]],["logmessage"]]],[11,"clone","","",13,[[["self"]],["level"]]],[11,"default","oak_abi::proto::google::rpc","",0,[[],["status"]]],[11,"default","","",1,[[],["code"]]],[11,"default","oak_abi::proto::oak","",2,[[],["oakstatus"]]],[11,"default","","",3,[[],["channelreadstatus"]]],[11,"default","oak_abi::proto::oak::label","",4,[[],["label"]]],[11,"default","","",5,[[],["tag"]]],[11,"default","","",6,[[],["grpctag"]]],[11,"default","","",7,[[],["webassemblymoduletag"]]],[11,"default","","",8,[[],["tlsendpointtag"]]],[11,"default","oak_abi::proto::oak::encap","",10,[[],["grpcrequest"]]],[11,"default","","",11,[[],["grpcresponse"]]],[11,"default","oak_abi::proto::oak::log","",12,[[],["logmessage"]]],[11,"default","","",13,[[],["level"]]],[11,"cmp","oak_abi::proto::google::rpc","",1,[[["code"],["self"]],["ordering"]]],[11,"cmp","oak_abi::proto::oak","",2,[[["oakstatus"],["self"]],["ordering"]]],[11,"cmp","","",3,[[["self"],["channelreadstatus"]],["ordering"]]],[11,"cmp","oak_abi::proto::oak::log","",13,[[["level"],["self"]],["ordering"]]],[11,"eq","oak_abi::proto::google::rpc","",0,[[["status"],["self"]],["bool"]]],[11,"ne","","",0,[[["status"],["self"]],["bool"]]],[11,"eq","","",1,[[["code"],["self"]],["bool"]]],[11,"eq","oak_abi::proto::oak","",2,[[["oakstatus"],["self"]],["bool"]]],[11,"eq","","",3,[[["self"],["channelreadstatus"]],["bool"]]],[11,"eq","oak_abi::proto::oak::label","",4,[[["self"],["label"]],["bool"]]],[11,"ne","","",4,[[["self"],["label"]],["bool"]]],[11,"eq","","",5,[[["tag"],["self"]],["bool"]]],[11,"ne","","",5,[[["tag"],["self"]],["bool"]]],[11,"eq","oak_abi::proto::oak::label::tag","",9,[[["self"],["tag"]],["bool"]]],[11,"ne","","",9,[[["self"],["tag"]],["bool"]]],[11,"eq","oak_abi::proto::oak::label","",6,[[["grpctag"],["self"]],["bool"]]],[11,"ne","","",6,[[["grpctag"],["self"]],["bool"]]],[11,"eq","","",7,[[["webassemblymoduletag"],["self"]],["bool"]]],[11,"ne","","",7,[[["webassemblymoduletag"],["self"]],["bool"]]],[11,"eq","","",8,[[["tlsendpointtag"],["self"]],["bool"]]],[11,"ne","","",8,[[["tlsendpointtag"],["self"]],["bool"]]],[11,"eq","oak_abi::proto::oak::encap","",10,[[["self"],["grpcrequest"]],["bool"]]],[11,"ne","","",10,[[["self"],["grpcrequest"]],["bool"]]],[11,"eq","","",11,[[["self"],["grpcresponse"]],["bool"]]],[11,"ne","","",11,[[["self"],["grpcresponse"]],["bool"]]],[11,"eq","oak_abi::proto::oak::log","",12,[[["self"],["logmessage"]],["bool"]]],[11,"ne","","",12,[[["self"],["logmessage"]],["bool"]]],[11,"eq","","",13,[[["level"],["self"]],["bool"]]],[11,"partial_cmp","oak_abi::proto::google::rpc","",1,[[["code"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","oak_abi::proto::oak","",2,[[["oakstatus"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","","",3,[[["self"],["channelreadstatus"]],[["option",["ordering"]],["ordering"]]]],[11,"partial_cmp","oak_abi::proto::oak::log","",13,[[["level"],["self"]],[["option",["ordering"]],["ordering"]]]],[11,"fmt","oak_abi::proto::google::rpc","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak_abi::proto::oak","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",3,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak_abi::proto::oak::label","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak_abi::proto::oak::label::tag","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak_abi::proto::oak::label","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak_abi::proto::oak::encap","",10,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",11,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak_abi::proto::oak::log","",12,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",13,[[["formatter"],["self"]],["result"]]],[11,"hash","oak_abi::proto::google::rpc","",1,[[["self"],["__h"]]]],[11,"hash","oak_abi::proto::oak","",2,[[["self"],["__h"]]]],[11,"hash","","",3,[[["self"],["__h"]]]],[11,"hash","oak_abi::proto::oak::label","",4,[[["self"],["__h"]]]],[11,"hash","","",5,[[["self"],["__h"]]]],[11,"hash","oak_abi::proto::oak::label::tag","",9,[[["self"],["__h"]]]],[11,"hash","oak_abi::proto::oak::label","",6,[[["self"],["__h"]]]],[11,"hash","","",7,[[["self"],["__h"]]]],[11,"hash","","",8,[[["self"],["__h"]]]],[11,"hash","oak_abi::proto::oak::log","",13,[[["self"],["__h"]]]],[11,"encode_raw","oak_abi::proto::google::rpc","",0,[[["self"],["b"]]]],[11,"merge_field","","",0,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",0,[[["self"]],["usize"]]],[11,"clear","","",0,[[["self"]]]],[11,"encode_raw","oak_abi::proto::oak::label","",4,[[["self"],["b"]]]],[11,"merge_field","","",4,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",4,[[["self"]],["usize"]]],[11,"clear","","",4,[[["self"]]]],[11,"encode_raw","","",5,[[["self"],["b"]]]],[11,"merge_field","","",5,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",5,[[["self"]],["usize"]]],[11,"clear","","",5,[[["self"]]]],[11,"encode_raw","","",6,[[["self"],["b"]]]],[11,"merge_field","","",6,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",6,[[["self"]],["usize"]]],[11,"clear","","",6,[[["self"]]]],[11,"encode_raw","","",7,[[["self"],["b"]]]],[11,"merge_field","","",7,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",7,[[["self"]],["usize"]]],[11,"clear","","",7,[[["self"]]]],[11,"encode_raw","","",8,[[["self"],["b"]]]],[11,"merge_field","","",8,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",8,[[["self"]],["usize"]]],[11,"clear","","",8,[[["self"]]]],[11,"encode_raw","oak_abi::proto::oak::encap","",10,[[["self"],["b"]]]],[11,"merge_field","","",10,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",10,[[["self"]],["usize"]]],[11,"clear","","",10,[[["self"]]]],[11,"encode_raw","","",11,[[["self"],["b"]]]],[11,"merge_field","","",11,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",11,[[["self"]],["usize"]]],[11,"clear","","",11,[[["self"]]]],[11,"encode_raw","oak_abi::proto::oak::log","",12,[[["self"],["b"]]]],[11,"merge_field","","",12,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",12,[[["self"]],["usize"]]],[11,"clear","","",12,[[["self"]]]],[11,"serialize","oak_abi::proto::oak::label","Convert a label to bytes.",4,[[["self"]],[["vec",["u8"]],["u8"]]]],[11,"deserialize","","Build the label from bytes.",4,[[],["option"]]],[11,"public_trusted","","Return the least privileged label.",4,[[],["self"]]],[11,"flows_to","","Compare two labels according to the lattice structure: L_0â€¦",4,[[["self"]],["bool"]]]],"p":[[3,"Status"],[4,"Code"],[4,"OakStatus"],[4,"ChannelReadStatus"],[3,"Label"],[3,"Tag"],[3,"GrpcTag"],[3,"WebAssemblyModuleTag"],[3,"TlsEndpointTag"],[4,"Tag"],[3,"GrpcRequest"],[3,"GrpcResponse"],[3,"LogMessage"],[4,"Level"]]};
searchIndex["oak_glue"] = {"doc":"","i":[[5,"glue_init","oak_glue","",null,[[["u32"]]]],[5,"glue_start","","Start the Rust runtime, with the ApplicationConfigurationâ€¦",null,[[["u32"],["option"],["usize"]],["u64"]]],[5,"glue_stop","","Stop the Rust runtime.",null,[[]]],[5,"glue_wait_on_channels","","See [`oak_abi::wait_on_channels`].",null,[[["u64"],["u32"]],["u32"]]],[5,"glue_channel_read","","See [`oak_abi::channel_read`].",null,[[["usize"],["u32"],["u64"]],["u32"]]],[5,"glue_channel_write","","See [`oak_abi::channel_write`].",null,[[["u32"],["usize"],["u64"]],["u32"]]],[5,"glue_channel_create","","See [`oak_abi::channel_create`].",null,[[["u64"]],["u32"]]],[5,"glue_channel_close","","See [`oak_abi::channel_close`].",null,[[["u64"]],["u32"]]]],"p":[]};
searchIndex["oak_loader"] = {"doc":"An utility binary to run Oak Runtime.","i":[[3,"Opt","oak_loader","",null,null],[12,"application","","",0,null],[12,"ca_cert","","",0,null],[12,"private_key","","",0,null],[12,"cert_chain","","",0,null],[5,"read_file","","",null,[[["str"]],[["result",["vec","box"]],["vec",["u8"]],["box",["error"]]]]],[5,"main","","",null,[[],[["result",["box"]],["box",["error"]]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"clone","","",0,[[["self"]],["opt"]]],[11,"clap","","",0,[[],["app"]]],[11,"from_clap","","",0,[[["argmatches"]],["self"]]],[11,"augment_clap","","",0,[[["app"]],["app"]]],[11,"is_subcommand","","",0,[[],["bool"]]]],"p":[[3,"Opt"]]};
searchIndex["oak_runtime"] = {"doc":"","i":[[3,"Handle","oak_runtime","A reference to a [`Channel`]. Each [`Handle`] has anâ€¦",null,null],[12,"0","","",0,null],[0,"proto","","",null,null],[0,"oak","oak_runtime::proto","",null,null],[0,"application","oak_runtime::proto::oak","",null,null],[3,"ApplicationConfiguration","oak_runtime::proto::oak::application","An ApplicationConfiguration represents a unit ofâ€¦",null,null],[12,"node_configs","","Collection of available Node configurations, indexed byâ€¦",1,null],[12,"initial_node_config_name","","Indication of what configuration the initial Node shouldâ€¦",1,null],[12,"initial_entrypoint_name","","The name of an exported Web Assembly function in theâ€¦",1,null],[12,"grpc_port","","Port number used by the gRPC pseudo-node; must be >= 1024.",1,null],[3,"NodeConfiguration","","NodeConfiguration indicates the configuration of a createdâ€¦",null,null],[12,"name","","",2,null],[12,"config_type","","",2,null],[3,"WebAssemblyConfiguration","","WebAssemblyConfiguration describes the configuration of aâ€¦",null,null],[12,"module_bytes","","The compiled code of the Oak Node, in WebAssembly binaryâ€¦",3,null],[3,"LogConfiguration","","LogConfiguration describes the configuration of a loggingâ€¦",null,null],[3,"StorageProxyConfiguration","","StorageProxyConfiguration describes the configuration of aâ€¦",null,null],[12,"address","","The address of the external storage provider.",4,null],[3,"GrpcServerConfiguration","","GrpcServerConfiguration describes the configuration of aâ€¦",null,null],[12,"address","","The endpoint address for the gRPC server to listen on.â€¦",5,null],[3,"GrpcClientConfiguration","","GrpcClientConfiguration describes the configuration of aâ€¦",null,null],[12,"address","","The endpoint address of the external gRPC service.â€¦",6,null],[3,"RoughtimeClientConfiguration","","RoughtimeClientConfiguration describes the configurationâ€¦",null,null],[12,"servers","","The collection of Roughtime servers to query. A defaultâ€¦",7,null],[12,"min_overlapping_intervals","","Connection parameters; default values will be used if anyâ€¦",7,null],[12,"timeout_seconds","","",7,null],[12,"server_retries","","",7,null],[12,"max_radius_microseconds","","",7,null],[3,"RoughtimeServer","","Information to identify a particular Roughtime server.â€¦",null,null],[12,"name","","",8,null],[12,"host","","",8,null],[12,"port","","",8,null],[12,"public_key_base64","","",8,null],[0,"node_configuration","","",null,null],[4,"ConfigType","oak_runtime::proto::oak::application::node_configuration","",null,null],[13,"WasmConfig","","",9,null],[13,"LogConfig","","",9,null],[13,"StorageConfig","","",9,null],[13,"GrpcServerConfig","","",9,null],[13,"GrpcClientConfig","","",9,null],[13,"RoughtimeClientConfig","","",9,null],[11,"encode","","",9,[[["self"],["b"]]]],[11,"merge","","",9,[[["u32"],["wiretype"],["b"],["decodecontext"],["option"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",9,[[["self"]],["usize"]]],[0,"config","oak_runtime","",null,null],[5,"application_configuration","oak_runtime::config","Create an application configuration.",null,[[["buildhasher"],["string"],["str"],["vec",["u8"]],["hashmap",["string","vec"]]],["applicationconfiguration"]]],[5,"from_protobuf","","Load a `runtime::Configuration` from a protobufâ€¦",null,[[["applicationconfiguration"]],[["oakstatus"],["configuration"],["result",["configuration","oakstatus"]]]]],[5,"configure_and_run","","Configure a [`Runtime`] from the given protobufâ€¦",null,[[["applicationconfiguration"]],[["oakstatus"],["result",["oakstatus"]]]]],[0,"message","oak_runtime","",null,null],[3,"Message","oak_runtime::message","Encapsulates a message consisting of opaque data bytes andâ€¦",null,null],[12,"data","","",10,null],[12,"channels","","",10,null],[0,"node","oak_runtime","",null,null],[4,"Configuration","oak_runtime::node","A `Configuration` corresponds to an entry from aâ€¦",null,null],[13,"LogNode","","The configuration for a logging pseudo-Node.",11,null],[13,"GrpcServerNode","","The configuration for a gRPC server pseudo-Node thatâ€¦",11,null],[12,"address","oak_runtime::node::Configuration","",11,null],[13,"WasmNode","oak_runtime::node","The configuration for a Wasm Node.",11,null],[12,"module","oak_runtime::node::Configuration","",11,null],[13,"External","oak_runtime::node","The configuration for an externally provided pseudo-Node.",11,null],[4,"ConfigurationError","","A enumeration for errors occuring when buildingâ€¦",null,null],[13,"AddressParsingError","","",12,null],[13,"IncorrectPort","","",12,null],[13,"WasmiModuleInializationError","","",12,null],[5,"load_wasm","","Loads a Wasm module into a Node configuration, returningâ€¦",null,[[],[["configurationerror"],["result",["configuration","configurationerror"]],["configuration"]]]],[5,"check_port","","Checks if port is greater than 1023.",null,[[["socketaddr"]],[["result",["configurationerror"]],["configurationerror"]]]],[0,"external","","",null,null],[3,"PseudoNode","oak_runtime::node::external","",null,null],[5,"register_factory","","",null,[[["nodefactory"]]]],[6,"NodeFactory","","",null,null],[11,"new","","",13,[[["str"],["runtimeproxy"],["handle"]],["self"]]],[8,"Node","oak_runtime::node","A trait implemented by every Node and pseudo-Node.",null,null],[10,"start","","Starts executing the Node.",14,[[["box"]],[["result",["joinhandle","oakstatus"]],["joinhandle"],["oakstatus"]]]],[11,"create_node","","Creates a new Node instance corresponding to theâ€¦",11,[[["str"],["runtimeproxy"],["string"],["self"],["handle"]],[["node"],["box",["node"]]]]],[0,"runtime","oak_runtime","",null,null],[3,"Handle","oak_runtime::runtime","A reference to a [`Channel`]. Each [`Handle`] has anâ€¦",null,null],[12,"0","","",0,null],[3,"NodeId","","An identifier for a Node that is opaque for type safety.",null,null],[12,"0","","",15,null],[3,"Configuration","","",null,null],[12,"nodes","","",16,null],[12,"entry_module","","",16,null],[12,"entrypoint","","",16,null],[3,"Runtime","","Runtime structure for configuring and running a set of Oakâ€¦",null,null],[3,"RuntimeProxy","","A proxy object that binds together a reference to theâ€¦",null,null],[12,"runtime","","",17,null],[12,"node_id","","",17,null],[4,"HandleDirection","","The direction of a [`Handle`] can be discovered byâ€¦",null,null],[13,"Read","","",18,null],[13,"Write","","",18,null],[4,"ReadStatus","","A helper type to determine if `try_read_message` wasâ€¦",null,null],[13,"Success","","",19,null],[13,"NeedsCapacity","","",19,null],[17,"RUNTIME_NODE_ID","","A Node identifier reserved for the Runtime that allowsâ€¦",null,null],[17,"TEST_NODE_ID","","For testing use the same reserved identifier to allowâ€¦",null,null],[11,"create","","Creates a [`Runtime`] instance but does not startâ€¦",20,[[["configuration"]],["self"]]],[11,"run","","Configures and runs the protobuf specified Applicationâ€¦",20,[[["arc"]],[["oakstatus"],["result",["handle","oakstatus"]],["handle"]]]],[11,"is_terminating","","Thread safe method for determining if the [`Runtime`] isâ€¦",20,[[["self"]],["bool"]]],[11,"stop","","Thread safe method for signaling termination to aâ€¦",20,[[["self"]]]],[11,"new_channel","","Creates a new [`Channel`] and returns a `(writer handle,â€¦",20,[[["nodeid"],["label"],["self"]]]],[11,"wait_on_channels","","Waits on a slice of `Handle`s, blocking until one of theâ€¦",20,[[["nodeid"],["self"]],[["oakstatus"],["vec",["channelreadstatus"]],["result",["vec","oakstatus"]]]]],[11,"channel_write","","Write a message to a channel. Fails withâ€¦",20,[[["message"],["nodeid"],["self"],["handle"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"channel_read","","Thread safe. Read a message from a channel. Fails withâ€¦",20,[[["nodeid"],["self"],["handle"]],[["result",["option","oakstatus"]],["oakstatus"],["option",["message"]]]]],[11,"channel_status","","Thread safe. This function returns: -â€¦",20,[[["nodeid"],["self"],["handle"]],[["result",["channelreadstatus","oakstatus"]],["channelreadstatus"],["oakstatus"]]]],[11,"channel_try_read_message","","Thread safe. Reads a message from the channel ifâ€¦",20,[[["usize"],["nodeid"],["self"],["handle"]],[["option",["readstatus"]],["oakstatus"],["result",["option","oakstatus"]]]]],[11,"channel_get_direction","","Return the direction of a [`Handle`]. This is useful whenâ€¦",20,[[["nodeid"],["self"],["handle"]],[["handledirection"],["oakstatus"],["result",["handledirection","oakstatus"]]]]],[11,"channel_close","","Close a [`Handle`], potentially orphaning the underlyingâ€¦",20,[[["nodeid"],["self"],["handle"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"remove_node_id","","Remove a Node by [`NodeId`] from the [`Runtime`].",20,[[["nodeid"],["self"]]]],[11,"node_create","","Thread safe method that attempts to create a Node withinâ€¦",20,[[["str"],["label"],["arc"],["nodeid"],["handle"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"node_start_instance","","Starts a newly created Node instance, by firstâ€¦",20,[[["label"],["box",["node"]],["nodeid"],["i"],["self"],["node"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"new_runtime_proxy","","",20,[[["arc"]],["runtimeproxy"]]],[11,"is_terminating","","See [`Runtime::is_terminating`].",17,[[["self"]],["bool"]]],[11,"exit_node","","See [`Runtime::remove_node_id`].",17,[[["self"]]]],[11,"node_create","","See [`Runtime::node_create`].",17,[[["str"],["label"],["self"],["handle"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"channel_create","","See [`Runtime::new_channel`].",17,[[["label"],["self"]]]],[11,"channel_close","","See [`Runtime::channel_close`].",17,[[["self"],["handle"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"wait_on_channels","","See [`Runtime::wait_on_channels`].",17,[[["self"]],[["oakstatus"],["vec",["channelreadstatus"]],["result",["vec","oakstatus"]]]]],[11,"channel_write","","See [`Runtime::channel_write`].",17,[[["message"],["self"],["handle"]],[["oakstatus"],["result",["oakstatus"]]]]],[11,"channel_read","","See [`Runtime::channel_read`].",17,[[["self"],["handle"]],[["result",["option","oakstatus"]],["oakstatus"],["option",["message"]]]]],[11,"channel_try_read_message","","See [`Runtime::channel_try_read_message`].",17,[[["usize"],["self"],["handle"]],[["option",["readstatus"]],["oakstatus"],["result",["option","oakstatus"]]]]],[11,"channel_get_direction","","See [`Runtime::channel_get_direction`].",17,[[["self"],["handle"]],[["handledirection"],["oakstatus"],["result",["handledirection","oakstatus"]]]]],[11,"from","oak_runtime","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"vzip","","",0,[[],["v"]]],[11,"equivalent","","",0,[[["k"],["self"]],["bool"]]],[11,"from","oak_runtime::proto::oak::application","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"vzip","","",2,[[],["v"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"to_owned","","",3,[[["self"]],["t"]]],[11,"clone_into","","",3,[[["self"],["t"]]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"vzip","","",3,[[],["v"]]],[11,"from","","",21,[[["t"]],["t"]]],[11,"into","","",21,[[],["u"]]],[11,"to_owned","","",21,[[["self"]],["t"]]],[11,"clone_into","","",21,[[["self"],["t"]]]],[11,"try_from","","",21,[[["u"]],["result"]]],[11,"try_into","","",21,[[],["result"]]],[11,"borrow","","",21,[[["self"]],["t"]]],[11,"borrow_mut","","",21,[[["self"]],["t"]]],[11,"type_id","","",21,[[["self"]],["typeid"]]],[11,"vzip","","",21,[[],["v"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"to_owned","","",5,[[["self"]],["t"]]],[11,"clone_into","","",5,[[["self"],["t"]]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"vzip","","",5,[[],["v"]]],[11,"from","","",6,[[["t"]],["t"]]],[11,"into","","",6,[[],["u"]]],[11,"to_owned","","",6,[[["self"]],["t"]]],[11,"clone_into","","",6,[[["self"],["t"]]]],[11,"try_from","","",6,[[["u"]],["result"]]],[11,"try_into","","",6,[[],["result"]]],[11,"borrow","","",6,[[["self"]],["t"]]],[11,"borrow_mut","","",6,[[["self"]],["t"]]],[11,"type_id","","",6,[[["self"]],["typeid"]]],[11,"vzip","","",6,[[],["v"]]],[11,"from","","",7,[[["t"]],["t"]]],[11,"into","","",7,[[],["u"]]],[11,"to_owned","","",7,[[["self"]],["t"]]],[11,"clone_into","","",7,[[["self"],["t"]]]],[11,"try_from","","",7,[[["u"]],["result"]]],[11,"try_into","","",7,[[],["result"]]],[11,"borrow","","",7,[[["self"]],["t"]]],[11,"borrow_mut","","",7,[[["self"]],["t"]]],[11,"type_id","","",7,[[["self"]],["typeid"]]],[11,"vzip","","",7,[[],["v"]]],[11,"from","","",8,[[["t"]],["t"]]],[11,"into","","",8,[[],["u"]]],[11,"to_owned","","",8,[[["self"]],["t"]]],[11,"clone_into","","",8,[[["self"],["t"]]]],[11,"try_from","","",8,[[["u"]],["result"]]],[11,"try_into","","",8,[[],["result"]]],[11,"borrow","","",8,[[["self"]],["t"]]],[11,"borrow_mut","","",8,[[["self"]],["t"]]],[11,"type_id","","",8,[[["self"]],["typeid"]]],[11,"vzip","","",8,[[],["v"]]],[11,"from","oak_runtime::proto::oak::application::node_configuration","",9,[[["t"]],["t"]]],[11,"into","","",9,[[],["u"]]],[11,"to_owned","","",9,[[["self"]],["t"]]],[11,"clone_into","","",9,[[["self"],["t"]]]],[11,"try_from","","",9,[[["u"]],["result"]]],[11,"try_into","","",9,[[],["result"]]],[11,"borrow","","",9,[[["self"]],["t"]]],[11,"borrow_mut","","",9,[[["self"]],["t"]]],[11,"type_id","","",9,[[["self"]],["typeid"]]],[11,"vzip","","",9,[[],["v"]]],[11,"from","oak_runtime::message","",10,[[["t"]],["t"]]],[11,"into","","",10,[[],["u"]]],[11,"try_from","","",10,[[["u"]],["result"]]],[11,"try_into","","",10,[[],["result"]]],[11,"borrow","","",10,[[["self"]],["t"]]],[11,"borrow_mut","","",10,[[["self"]],["t"]]],[11,"type_id","","",10,[[["self"]],["typeid"]]],[11,"vzip","","",10,[[],["v"]]],[11,"from","oak_runtime::node","",11,[[["t"]],["t"]]],[11,"into","","",11,[[],["u"]]],[11,"try_from","","",11,[[["u"]],["result"]]],[11,"try_into","","",11,[[],["result"]]],[11,"borrow","","",11,[[["self"]],["t"]]],[11,"borrow_mut","","",11,[[["self"]],["t"]]],[11,"type_id","","",11,[[["self"]],["typeid"]]],[11,"vzip","","",11,[[],["v"]]],[11,"from","","",12,[[["t"]],["t"]]],[11,"into","","",12,[[],["u"]]],[11,"to_string","","",12,[[["self"]],["string"]]],[11,"try_from","","",12,[[["u"]],["result"]]],[11,"try_into","","",12,[[],["result"]]],[11,"borrow","","",12,[[["self"]],["t"]]],[11,"borrow_mut","","",12,[[["self"]],["t"]]],[11,"type_id","","",12,[[["self"]],["typeid"]]],[11,"vzip","","",12,[[],["v"]]],[11,"from","oak_runtime::node::external","",13,[[["t"]],["t"]]],[11,"into","","",13,[[],["u"]]],[11,"try_from","","",13,[[["u"]],["result"]]],[11,"try_into","","",13,[[],["result"]]],[11,"borrow","","",13,[[["self"]],["t"]]],[11,"borrow_mut","","",13,[[["self"]],["t"]]],[11,"type_id","","",13,[[["self"]],["typeid"]]],[11,"vzip","","",13,[[],["v"]]],[11,"from","oak_runtime::runtime","",15,[[["t"]],["t"]]],[11,"into","","",15,[[],["u"]]],[11,"to_owned","","",15,[[["self"]],["t"]]],[11,"clone_into","","",15,[[["self"],["t"]]]],[11,"try_from","","",15,[[["u"]],["result"]]],[11,"try_into","","",15,[[],["result"]]],[11,"borrow","","",15,[[["self"]],["t"]]],[11,"borrow_mut","","",15,[[["self"]],["t"]]],[11,"type_id","","",15,[[["self"]],["typeid"]]],[11,"vzip","","",15,[[],["v"]]],[11,"equivalent","","",15,[[["k"],["self"]],["bool"]]],[11,"from","","",16,[[["t"]],["t"]]],[11,"into","","",16,[[],["u"]]],[11,"try_from","","",16,[[["u"]],["result"]]],[11,"try_into","","",16,[[],["result"]]],[11,"borrow","","",16,[[["self"]],["t"]]],[11,"borrow_mut","","",16,[[["self"]],["t"]]],[11,"type_id","","",16,[[["self"]],["typeid"]]],[11,"vzip","","",16,[[],["v"]]],[11,"from","","",20,[[["t"]],["t"]]],[11,"into","","",20,[[],["u"]]],[11,"try_from","","",20,[[["u"]],["result"]]],[11,"try_into","","",20,[[],["result"]]],[11,"borrow","","",20,[[["self"]],["t"]]],[11,"borrow_mut","","",20,[[["self"]],["t"]]],[11,"type_id","","",20,[[["self"]],["typeid"]]],[11,"vzip","","",20,[[],["v"]]],[11,"from","","",17,[[["t"]],["t"]]],[11,"into","","",17,[[],["u"]]],[11,"to_owned","","",17,[[["self"]],["t"]]],[11,"clone_into","","",17,[[["self"],["t"]]]],[11,"try_from","","",17,[[["u"]],["result"]]],[11,"try_into","","",17,[[],["result"]]],[11,"borrow","","",17,[[["self"]],["t"]]],[11,"borrow_mut","","",17,[[["self"]],["t"]]],[11,"type_id","","",17,[[["self"]],["typeid"]]],[11,"vzip","","",17,[[],["v"]]],[11,"from","","",18,[[["t"]],["t"]]],[11,"into","","",18,[[],["u"]]],[11,"to_owned","","",18,[[["self"]],["t"]]],[11,"clone_into","","",18,[[["self"],["t"]]]],[11,"try_from","","",18,[[["u"]],["result"]]],[11,"try_into","","",18,[[],["result"]]],[11,"borrow","","",18,[[["self"]],["t"]]],[11,"borrow_mut","","",18,[[["self"]],["t"]]],[11,"type_id","","",18,[[["self"]],["typeid"]]],[11,"vzip","","",18,[[],["v"]]],[11,"equivalent","","",18,[[["k"],["self"]],["bool"]]],[11,"from","","",19,[[["t"]],["t"]]],[11,"into","","",19,[[],["u"]]],[11,"try_from","","",19,[[["u"]],["result"]]],[11,"try_into","","",19,[[],["result"]]],[11,"borrow","","",19,[[["self"]],["t"]]],[11,"borrow_mut","","",19,[[["self"]],["t"]]],[11,"type_id","","",19,[[["self"]],["typeid"]]],[11,"vzip","","",19,[[],["v"]]],[11,"start","oak_runtime::node::external","",13,[[["box"]],[["result",["joinhandle","oakstatus"]],["joinhandle"],["oakstatus"]]]],[11,"drop","oak_runtime::runtime","",20,[[["self"]]]],[11,"from","oak_runtime::node","",12,[[["addrparseerror"]],["self"]]],[11,"clone","oak_runtime::proto::oak::application","",1,[[["self"]],["applicationconfiguration"]]],[11,"clone","","",2,[[["self"]],["nodeconfiguration"]]],[11,"clone","oak_runtime::proto::oak::application::node_configuration","",9,[[["self"]],["configtype"]]],[11,"clone","oak_runtime::proto::oak::application","",3,[[["self"]],["webassemblyconfiguration"]]],[11,"clone","","",21,[[["self"]],["logconfiguration"]]],[11,"clone","","",4,[[["self"]],["storageproxyconfiguration"]]],[11,"clone","","",5,[[["self"]],["grpcserverconfiguration"]]],[11,"clone","","",6,[[["self"]],["grpcclientconfiguration"]]],[11,"clone","","",7,[[["self"]],["roughtimeclientconfiguration"]]],[11,"clone","","",8,[[["self"]],["roughtimeserver"]]],[11,"clone","oak_runtime","",0,[[["self"]],["handle"]]],[11,"clone","oak_runtime::runtime","",18,[[["self"]],["handledirection"]]],[11,"clone","","",15,[[["self"]],["nodeid"]]],[11,"clone","","",17,[[["self"]],["runtimeproxy"]]],[11,"default","oak_runtime::proto::oak::application","",1,[[],["applicationconfiguration"]]],[11,"default","","",2,[[],["nodeconfiguration"]]],[11,"default","","",3,[[],["webassemblyconfiguration"]]],[11,"default","","",21,[[],["logconfiguration"]]],[11,"default","","",4,[[],["storageproxyconfiguration"]]],[11,"default","","",5,[[],["grpcserverconfiguration"]]],[11,"default","","",6,[[],["grpcclientconfiguration"]]],[11,"default","","",7,[[],["roughtimeclientconfiguration"]]],[11,"default","","",8,[[],["roughtimeserver"]]],[11,"eq","","",1,[[["applicationconfiguration"],["self"]],["bool"]]],[11,"ne","","",1,[[["applicationconfiguration"],["self"]],["bool"]]],[11,"eq","","",2,[[["self"],["nodeconfiguration"]],["bool"]]],[11,"ne","","",2,[[["self"],["nodeconfiguration"]],["bool"]]],[11,"eq","oak_runtime::proto::oak::application::node_configuration","",9,[[["self"],["configtype"]],["bool"]]],[11,"ne","","",9,[[["self"],["configtype"]],["bool"]]],[11,"eq","oak_runtime::proto::oak::application","",3,[[["self"],["webassemblyconfiguration"]],["bool"]]],[11,"ne","","",3,[[["self"],["webassemblyconfiguration"]],["bool"]]],[11,"eq","","",21,[[["self"],["logconfiguration"]],["bool"]]],[11,"eq","","",4,[[["storageproxyconfiguration"],["self"]],["bool"]]],[11,"ne","","",4,[[["storageproxyconfiguration"],["self"]],["bool"]]],[11,"eq","","",5,[[["grpcserverconfiguration"],["self"]],["bool"]]],[11,"ne","","",5,[[["grpcserverconfiguration"],["self"]],["bool"]]],[11,"eq","","",6,[[["self"],["grpcclientconfiguration"]],["bool"]]],[11,"ne","","",6,[[["self"],["grpcclientconfiguration"]],["bool"]]],[11,"eq","","",7,[[["self"],["roughtimeclientconfiguration"]],["bool"]]],[11,"ne","","",7,[[["self"],["roughtimeclientconfiguration"]],["bool"]]],[11,"eq","","",8,[[["self"],["roughtimeserver"]],["bool"]]],[11,"ne","","",8,[[["self"],["roughtimeserver"]],["bool"]]],[11,"eq","oak_runtime","",0,[[["self"],["handle"]],["bool"]]],[11,"ne","","",0,[[["self"],["handle"]],["bool"]]],[11,"eq","oak_runtime::runtime","",18,[[["handledirection"],["self"]],["bool"]]],[11,"eq","","",15,[[["self"],["nodeid"]],["bool"]]],[11,"ne","","",15,[[["self"],["nodeid"]],["bool"]]],[11,"fmt","oak_runtime::proto::oak::application","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",2,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak_runtime::proto::oak::application::node_configuration","",9,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak_runtime::proto::oak::application","",3,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",21,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",4,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",5,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",6,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",7,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",8,[[["self"],["formatter"]],["result"]]],[11,"fmt","oak_runtime::message","",10,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak_runtime::node","",12,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak_runtime","",0,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak_runtime::runtime","",18,[[["formatter"],["self"]],["result"]]],[11,"fmt","","",15,[[["formatter"],["self"]],["result"]]],[11,"fmt","oak_runtime::node","",12,[[["formatter"],["self"]],[["result",["error"]],["error"]]]],[11,"hash","oak_runtime","",0,[[["self"],["__h"]]]],[11,"hash","oak_runtime::runtime","",18,[[["self"],["__h"]]]],[11,"hash","","",15,[[["self"],["__h"]]]],[11,"encode_raw","oak_runtime::proto::oak::application","",1,[[["self"],["b"]]]],[11,"merge_field","","",1,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",1,[[["self"]],["usize"]]],[11,"clear","","",1,[[["self"]]]],[11,"encode_raw","","",2,[[["self"],["b"]]]],[11,"merge_field","","",2,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",2,[[["self"]],["usize"]]],[11,"clear","","",2,[[["self"]]]],[11,"encode_raw","","",3,[[["self"],["b"]]]],[11,"merge_field","","",3,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",3,[[["self"]],["usize"]]],[11,"clear","","",3,[[["self"]]]],[11,"encode_raw","","",21,[[["self"],["b"]]]],[11,"merge_field","","",21,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",21,[[["self"]],["usize"]]],[11,"clear","","",21,[[["self"]]]],[11,"encode_raw","","",4,[[["self"],["b"]]]],[11,"merge_field","","",4,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",4,[[["self"]],["usize"]]],[11,"clear","","",4,[[["self"]]]],[11,"encode_raw","","",5,[[["self"],["b"]]]],[11,"merge_field","","",5,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",5,[[["self"]],["usize"]]],[11,"clear","","",5,[[["self"]]]],[11,"encode_raw","","",6,[[["self"],["b"]]]],[11,"merge_field","","",6,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",6,[[["self"]],["usize"]]],[11,"clear","","",6,[[["self"]]]],[11,"encode_raw","","",7,[[["self"],["b"]]]],[11,"merge_field","","",7,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",7,[[["self"]],["usize"]]],[11,"clear","","",7,[[["self"]]]],[11,"encode_raw","","",8,[[["self"],["b"]]]],[11,"merge_field","","",8,[[["u32"],["wiretype"],["b"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",8,[[["self"]],["usize"]]],[11,"clear","","",8,[[["self"]]]]],"p":[[3,"Handle"],[3,"ApplicationConfiguration"],[3,"NodeConfiguration"],[3,"WebAssemblyConfiguration"],[3,"StorageProxyConfiguration"],[3,"GrpcServerConfiguration"],[3,"GrpcClientConfiguration"],[3,"RoughtimeClientConfiguration"],[3,"RoughtimeServer"],[4,"ConfigType"],[3,"Message"],[4,"Configuration"],[4,"ConfigurationError"],[3,"PseudoNode"],[8,"Node"],[3,"NodeId"],[3,"Configuration"],[3,"RuntimeProxy"],[4,"HandleDirection"],[4,"ReadStatus"],[3,"Runtime"],[3,"LogConfiguration"]]};
searchIndex["oak_tests"] = {"doc":"Test utilities to help with unit testing of Oak SDK code.","i":[[5,"compile_rust_wasm","oak_tests","Uses cargo to compile a Rust manifest to Wasm bytes.",null,[[["str"]],[["vec",["u8"]],["result",["vec"]]]]],[5,"run_single_module_default","","Convenience helper to build and run a single-Nodeâ€¦",null,[[["str"]],[["oakstatus"],["result",["oakstatus"]]]]],[5,"run_single_module","","Convenience helper to build and run a single-Nodeâ€¦",null,[[["str"]],[["oakstatus"],["result",["oakstatus"]]]]],[5,"grpc_request","","",null,[[["runtime"],["str"],["r"],["handle"]],["result"]]]],"p":[]};
searchIndex["oak_utils"] = {"doc":"","i":[[5,"compile_protos_to","oak_utils","",null,[[["q"]]]],[5,"compile_protos","","",null,[[]]]],"p":[]};
searchIndex["private_set_intersection"] = {"doc":"Private Set Intersection example for Project Oak.","i":[[5,"oak_main","private_set_intersection","",null,[[["u64"]]]]],"p":[]};
searchIndex["runner"] = {"doc":"A utility binary to run tests and orchestrate examples andâ€¦","i":[[5,"main","runner","",null,[[],[["result",["box"]],["box",["error"]]]]],[5,"is_ignored_path","","Return whether to ignore the specified path. This is usedâ€¦",null,[[["pathbuf"]],["bool"]]],[5,"is_ignored_entry","","",null,[[["direntry"]],["bool"]]],[5,"source_files","","Return an iterator of all the first-party and non-ignoredâ€¦",null,[[]]],[5,"workspace_manifest_files","","Return an iterator of all known Cargo Manifest files thatâ€¦",null,[[]]],[5,"is_bazel_file","","Return whether the provided path refers to a Bazel fileâ€¦",null,[[["pathbuf"]],["bool"]]],[5,"is_markdown_file","","Return whether the provided path refers to a markdown fileâ€¦",null,[[["pathbuf"]],["bool"]]],[5,"is_cargo_toml_file","","Return whether the provided path refers to a `Cargo.toml`â€¦",null,[[["pathbuf"]],["bool"]]],[5,"is_cargo_workspace_file","","Return whether the provided path refers to aâ€¦",null,[[["pathbuf"]],["bool"]]],[5,"run_buildifier","","",null,[[],["step"]]],[5,"run_prettier","","",null,[[],["step"]]],[5,"run_embedmd","","",null,[[],["step"]]],[5,"run_cargo_fmt","","",null,[[],["step"]]],[5,"run_cargo_test","","",null,[[],["step"]]],[5,"run_cargo_doc_test","","",null,[[],["step"]]],[5,"run_cargo_clippy","","",null,[[],["step"]]],[5,"run_bazel_build","","",null,[[],["step"]]],[5,"run_bazel_test","","",null,[[],["step"]]],[5,"to_string","","",null,[[["pathbuf"]],["string"]]],[0,"internal","","",null,null],[3,"Opt","runner::internal","",null,null],[12,"dry_run","","",0,null],[12,"commands","","",0,null],[12,"logs","","",0,null],[3,"Context","","Encapsulates all the local state relative to a step, andâ€¦",null,null],[12,"opt","","",1,null],[12,"prefix","","",1,null],[3,"SingleStatusResult","","",null,null],[12,"value","","",2,null],[12,"command","","",2,null],[12,"logs","","",2,null],[3,"Cmd","","A single command that implements the `Runnable` trait.",null,null],[12,"executable","","",3,null],[12,"args","","",3,null],[4,"StatusResultValue","","The outcome of an individual step of execution.",null,null],[13,"Ok","","",4,null],[13,"Error","","",4,null],[13,"Skipped","","",4,null],[4,"Step","","An execution step, which may be a single (dynamicallyâ€¦",null,null],[13,"Single","","",5,null],[12,"name","runner::internal::Step","",5,null],[12,"runnable","","",5,null],[13,"Multiple","runner::internal","",5,null],[12,"name","runner::internal::Step","",5,null],[12,"steps","","",5,null],[5,"values_to_string","runner::internal","",null,[[["t"]],["string"]]],[5,"run_step","","Run the provided step, printing out information about theâ€¦",null,[[["step"],["context"]],[["statusresultvalue"],["hashset",["statusresultvalue"]]]]],[5,"cmd","","Convenience constructor for a boxed `Cmd`.",null,[[["str"]],[["box",["runnable"]],["runnable"]]]],[8,"Runnable","","A runnable task which produces a single result.",null,null],[10,"run","","",6,[[["opt"],["self"]],["singlestatusresult"]]],[11,"root","","",1,[[["opt"]],["self"]]],[11,"child","","",1,[[["str"],["self"]],["self"]]],[11,"new","","",3,[[["str"]],["self"]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"from","","",3,[[["t"]],["t"]]],[11,"into","","",3,[[],["u"]]],[11,"try_from","","",3,[[["u"]],["result"]]],[11,"try_into","","",3,[[],["result"]]],[11,"borrow","","",3,[[["self"]],["t"]]],[11,"borrow_mut","","",3,[[["self"]],["t"]]],[11,"type_id","","",3,[[["self"]],["typeid"]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"to_owned","","",4,[[["self"]],["t"]]],[11,"clone_into","","",4,[[["self"],["t"]]]],[11,"to_string","","",4,[[["self"]],["string"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"from","","",5,[[["t"]],["t"]]],[11,"into","","",5,[[],["u"]]],[11,"try_from","","",5,[[["u"]],["result"]]],[11,"try_into","","",5,[[],["result"]]],[11,"borrow","","",5,[[["self"]],["t"]]],[11,"borrow_mut","","",5,[[["self"]],["t"]]],[11,"type_id","","",5,[[["self"]],["typeid"]]],[11,"run","","Run the provided command, printing a status message withâ€¦",3,[[["opt"],["self"]],["singlestatusresult"]]],[11,"clone","","",0,[[["self"]],["opt"]]],[11,"clone","","",4,[[["self"]],["statusresultvalue"]]],[11,"eq","","",4,[[["statusresultvalue"],["self"]],["bool"]]],[11,"fmt","","",4,[[["formatter"],["self"]],["result"]]],[11,"hash","","",4,[[["self"],["__h"]]]],[11,"clap","","",0,[[],["app"]]],[11,"from_clap","","",0,[[["argmatches"]],["self"]]],[11,"augment_clap","","",0,[[["app"]],["app"]]],[11,"is_subcommand","","",0,[[],["bool"]]]],"p":[[3,"Opt"],[3,"Context"],[3,"SingleStatusResult"],[3,"Cmd"],[4,"StatusResultValue"],[4,"Step"],[8,"Runnable"]]};
searchIndex["running_average"] = {"doc":"Running average example for Project Oak.","i":[[5,"oak_main","running_average","",null,[[["u64"]]]]],"p":[]};
searchIndex["rustfmt"] = {"doc":"","i":[[5,"oak_main","rustfmt","",null,[[["u64"]]]]],"p":[]};
searchIndex["split_grpc_client"] = {"doc":"","i":[[5,"main","split_grpc_client","",null,[[],[["result",["box"]],["box",["error"]]]]],[0,"proto","","",null,null],[3,"HelloRequest","split_grpc_client::proto","",null,null],[12,"greeting","","",0,null],[3,"HelloResponse","","",null,null],[12,"reply","","",1,null],[0,"hello_world_client","","Generated client implementations.",null,null],[3,"HelloWorldClient","split_grpc_client::proto::hello_world_client","As seen in https://grpc.io/docs/guides/concepts/.",null,null],[12,"inner","","",2,null],[11,"connect","","Attempt to create a new client by connecting to a givenâ€¦",2,[[["d"]]]],[11,"new","","",2,[[["t"]],["self"]]],[11,"with_interceptor","","",2,[[["t"]],["self"]]],[11,"say_hello","","",2,[[["self"]]]],[11,"lots_of_replies","","",2,[[["self"]]]],[11,"lots_of_greetings","","",2,[[["self"]]]],[11,"bidi_hello","","",2,[[["self"]]]],[11,"from","split_grpc_client::proto","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_request","","",0,[[],["request"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"into_request","","",1,[[],["request"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","split_grpc_client::proto::hello_world_client","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_request","","",2,[[],["request"]]],[11,"vzip","","",2,[[],["v"]]],[11,"clone","split_grpc_client::proto","",0,[[["self"]],["hellorequest"]]],[11,"clone","","",1,[[["self"]],["helloresponse"]]],[11,"clone","split_grpc_client::proto::hello_world_client","",2,[[["self"]],["self"]]],[11,"default","split_grpc_client::proto","",0,[[],["hellorequest"]]],[11,"default","","",1,[[],["helloresponse"]]],[11,"eq","","",0,[[["self"],["hellorequest"]],["bool"]]],[11,"ne","","",0,[[["self"],["hellorequest"]],["bool"]]],[11,"eq","","",1,[[["helloresponse"],["self"]],["bool"]]],[11,"ne","","",1,[[["helloresponse"],["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"encode_raw","","",0,[[["self"],["b"]]]],[11,"merge_field","","",0,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",0,[[["self"]],["usize"]]],[11,"clear","","",0,[[["self"]]]],[11,"encode_raw","","",1,[[["self"],["b"]]]],[11,"merge_field","","",1,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",1,[[["self"]],["usize"]]],[11,"clear","","",1,[[["self"]]]]],"p":[[3,"HelloRequest"],[3,"HelloResponse"],[3,"HelloWorldClient"]]};
searchIndex["split_grpc_proxy"] = {"doc":"","i":[[5,"main","split_grpc_proxy","",null,[[],["result"]]],[5,"proxy","","",null,[[["tcplistener"]]]],[5,"handle_connection","","",null,[[["tcpstream"]]]]],"p":[]};
searchIndex["split_grpc_server"] = {"doc":"","i":[[3,"HelloWorldHandler","split_grpc_server","",null,null],[5,"main","","",null,[[],[["result",["box"]],["box",["error"]]]]],[0,"proto","","",null,null],[3,"HelloRequest","split_grpc_server::proto","",null,null],[12,"greeting","","",0,null],[3,"HelloResponse","","",null,null],[12,"reply","","",1,null],[0,"hello_world_server","","Generated server implementations.",null,null],[3,"_Inner","split_grpc_server::proto::hello_world_server","",null,null],[12,"0","","",2,null],[12,"1","","",2,null],[8,"HelloWorld","","Generated trait containing gRPC methods that should beâ€¦",null,null],[10,"say_hello","","",3,[[["self"],["hellorequest"],["request",["hellorequest"]]],[["box",["future"]],["pin",["box"]]]]],[16,"LotsOfRepliesStream","","Server streaming response type for the LotsOfReplies method.",3,null],[10,"lots_of_replies","","",3,[[["self"],["hellorequest"],["request",["hellorequest"]]],[["pin",["box"]],["box",["future"]]]]],[10,"lots_of_greetings","","",3,[[["request",["streaming"]],["self"],["streaming",["hellorequest"]]],[["box",["future"]],["pin",["box"]]]]],[16,"BidiHelloStream","","Server streaming response type for the BidiHello method.",3,null],[10,"bidi_hello","","",3,[[["request",["streaming"]],["self"],["streaming",["hellorequest"]]],[["pin",["box"]],["box",["future"]]]]],[11,"from","split_grpc_server","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"into_request","","",4,[[],["request"]]],[11,"vzip","","",4,[[],["v"]]],[11,"from","split_grpc_server::proto","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"into_request","","",0,[[],["request"]]],[11,"vzip","","",0,[[],["v"]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"into_request","","",1,[[],["request"]]],[11,"vzip","","",1,[[],["v"]]],[11,"from","split_grpc_server::proto::hello_world_server","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"to_owned","","",2,[[["self"]],["t"]]],[11,"clone_into","","",2,[[["self"],["t"]]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"into_request","","",2,[[],["request"]]],[11,"vzip","","",2,[[],["v"]]],[11,"say_hello","split_grpc_server","",4,[[["self"],["request",["hellorequest"]],["hellorequest"]],[["box",["future"]],["pin",["box"]]]]],[11,"lots_of_replies","","",4,[[["self"],["request",["hellorequest"]],["hellorequest"]],[["pin",["box"]],["box",["future"]]]]],[11,"lots_of_greetings","","",4,[[["self"],["streaming",["hellorequest"]],["request",["streaming"]]],[["box",["future"]],["pin",["box"]]]]],[11,"bidi_hello","","",4,[[["self"],["streaming",["hellorequest"]],["request",["streaming"]]],[["pin",["box"]],["box",["future"]]]]],[11,"clone","split_grpc_server::proto","",0,[[["self"]],["hellorequest"]]],[11,"clone","","",1,[[["self"]],["helloresponse"]]],[11,"clone","split_grpc_server::proto::hello_world_server","",2,[[["self"]],["self"]]],[11,"default","split_grpc_server::proto","",0,[[],["hellorequest"]]],[11,"default","","",1,[[],["helloresponse"]]],[11,"default","split_grpc_server","",4,[[],["helloworldhandler"]]],[11,"eq","split_grpc_server::proto","",0,[[["hellorequest"],["self"]],["bool"]]],[11,"ne","","",0,[[["hellorequest"],["self"]],["bool"]]],[11,"eq","","",1,[[["helloresponse"],["self"]],["bool"]]],[11,"ne","","",1,[[["helloresponse"],["self"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"fmt","split_grpc_server::proto::hello_world_server","",2,[[["formatter"],["self"]],["result"]]],[11,"fmt","split_grpc_server","",4,[[["formatter"],["self"]],["result"]]],[11,"encode_raw","split_grpc_server::proto","",0,[[["self"],["b"]]]],[11,"merge_field","","",0,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",0,[[["self"]],["usize"]]],[11,"clear","","",0,[[["self"]]]],[11,"encode_raw","","",1,[[["self"],["b"]]]],[11,"merge_field","","",1,[[["u32"],["b"],["wiretype"],["self"],["decodecontext"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",1,[[["self"]],["usize"]]],[11,"clear","","",1,[[["self"]]]]],"p":[[3,"HelloRequest"],[3,"HelloResponse"],[3,"_Inner"],[8,"HelloWorld"],[3,"HelloWorldHandler"]]};
searchIndex["translator"] = {"doc":"","i":[[5,"oak_main","translator","",null,[[["u64"]]]]],"p":[]};
searchIndex["translator_common"] = {"doc":"","i":[[5,"translate","translator_common","",null,[[["str"],["translatorclient"]],[["string"],["option",["string"]]]]],[0,"proto","","",null,null],[3,"TranslateRequest","translator_common::proto","",null,null],[12,"text","","",0,null],[12,"from_lang","","ISO 639-1 codes",0,null],[12,"to_lang","","",0,null],[3,"TranslateResponse","","",null,null],[12,"translated_text","","",1,null],[3,"TranslatorDispatcher","","",null,null],[3,"TranslatorClient","","",null,null],[12,"0","","",2,null],[8,"Translator","","",null,null],[10,"translate","","",3,[[["self"],["translaterequest"]],[["result",["translateresponse"]],["translateresponse"]]]],[11,"new","","",4,[[["t"]],["translatordispatcher"]]],[11,"translate","","",2,[[["self"],["translaterequest"]],[["result",["translateresponse"]],["translateresponse"]]]],[11,"from","","",0,[[["t"]],["t"]]],[11,"into","","",0,[[],["u"]]],[11,"to_owned","","",0,[[["self"]],["t"]]],[11,"clone_into","","",0,[[["self"],["t"]]]],[11,"try_from","","",0,[[["u"]],["result"]]],[11,"try_into","","",0,[[],["result"]]],[11,"borrow","","",0,[[["self"]],["t"]]],[11,"borrow_mut","","",0,[[["self"]],["t"]]],[11,"type_id","","",0,[[["self"]],["typeid"]]],[11,"decode","","",0,[[["message"]],[["result",["oakerror"]],["oakerror"]]]],[11,"encode","","",0,[[["self"]],[["message"],["oakerror"],["result",["message","oakerror"]]]]],[11,"from","","",1,[[["t"]],["t"]]],[11,"into","","",1,[[],["u"]]],[11,"to_owned","","",1,[[["self"]],["t"]]],[11,"clone_into","","",1,[[["self"],["t"]]]],[11,"try_from","","",1,[[["u"]],["result"]]],[11,"try_into","","",1,[[],["result"]]],[11,"borrow","","",1,[[["self"]],["t"]]],[11,"borrow_mut","","",1,[[["self"]],["t"]]],[11,"type_id","","",1,[[["self"]],["typeid"]]],[11,"decode","","",1,[[["message"]],[["result",["oakerror"]],["oakerror"]]]],[11,"encode","","",1,[[["self"]],[["message"],["oakerror"],["result",["message","oakerror"]]]]],[11,"from","","",4,[[["t"]],["t"]]],[11,"into","","",4,[[],["u"]]],[11,"try_from","","",4,[[["u"]],["result"]]],[11,"try_into","","",4,[[],["result"]]],[11,"borrow","","",4,[[["self"]],["t"]]],[11,"borrow_mut","","",4,[[["self"]],["t"]]],[11,"type_id","","",4,[[["self"]],["typeid"]]],[11,"handle_command","","Handle incoming gRPC events for an [`ServerNode`].",4,[[["self"],["invocation"]],[["result",["oakerror"]],["oakerror"]]]],[11,"from","","",2,[[["t"]],["t"]]],[11,"into","","",2,[[],["u"]]],[11,"try_from","","",2,[[["u"]],["result"]]],[11,"try_into","","",2,[[],["result"]]],[11,"borrow","","",2,[[["self"]],["t"]]],[11,"borrow_mut","","",2,[[["self"]],["t"]]],[11,"type_id","","",2,[[["self"]],["typeid"]]],[11,"clone","","",0,[[["self"]],["translaterequest"]]],[11,"clone","","",1,[[["self"]],["translateresponse"]]],[11,"default","","",0,[[],["translaterequest"]]],[11,"default","","",1,[[],["translateresponse"]]],[11,"eq","","",0,[[["self"],["translaterequest"]],["bool"]]],[11,"ne","","",0,[[["self"],["translaterequest"]],["bool"]]],[11,"eq","","",1,[[["self"],["translateresponse"]],["bool"]]],[11,"ne","","",1,[[["self"],["translateresponse"]],["bool"]]],[11,"fmt","","",0,[[["self"],["formatter"]],["result"]]],[11,"fmt","","",1,[[["self"],["formatter"]],["result"]]],[11,"encode_raw","","",0,[[["self"],["b"]]]],[11,"merge_field","","",0,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",0,[[["self"]],["usize"]]],[11,"clear","","",0,[[["self"]]]],[11,"encode_raw","","",1,[[["self"],["b"]]]],[11,"merge_field","","",1,[[["u32"],["wiretype"],["b"],["decodecontext"],["self"]],[["result",["decodeerror"]],["decodeerror"]]]],[11,"encoded_len","","",1,[[["self"]],["usize"]]],[11,"clear","","",1,[[["self"]]]],[11,"invoke","","",4,[[["str"],["channelresponsewriter"],["self"]]]]],"p":[[3,"TranslateRequest"],[3,"TranslateResponse"],[3,"TranslatorClient"],[8,"Translator"],[3,"TranslatorDispatcher"]]};
addSearchOptions(searchIndex);initSearch(searchIndex);